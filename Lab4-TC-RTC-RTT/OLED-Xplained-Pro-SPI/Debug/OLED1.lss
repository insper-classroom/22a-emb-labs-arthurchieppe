
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000255c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  0040255c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002c0  2040044c  004029a8  0002044c  2**2
                  ALLOC
  3 .stack        00002004  2040070c  00402c68  0002044c  2**0
                  ALLOC
  4 .heap         00000200  20402710  00404c6c  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018f00  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003884  00000000  00000000  000393d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005de4  00000000  00000000  0003cc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000930  00000000  00000000  00042a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000998  00000000  00000000  0004336b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a563  00000000  00000000  00043d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f7c9  00000000  00000000  0004e266  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fd5f  00000000  00000000  0005da2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001600  00000000  00000000  000ed790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 27 40 20 39 14 40 00 35 14 40 00 35 14 40 00     .'@ 9.@.5.@.5.@.
  400010:	35 14 40 00 35 14 40 00 35 14 40 00 00 00 00 00     5.@.5.@.5.@.....
	...
  40002c:	35 14 40 00 35 14 40 00 00 00 00 00 35 14 40 00     5.@.5.@.....5.@.
  40003c:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  40004c:	95 18 40 00 35 14 40 00 35 14 40 00 35 14 40 00     ..@.5.@.5.@.5.@.
  40005c:	35 14 40 00 35 14 40 00 00 00 00 00 99 0f 40 00     5.@.5.@.......@.
  40006c:	ad 0f 40 00 c1 0f 40 00 35 14 40 00 35 14 40 00     ..@...@.5.@.5.@.
  40007c:	35 14 40 00 d5 0f 40 00 e9 0f 40 00 35 14 40 00     5.@...@...@.5.@.
  40008c:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  40009c:	35 14 40 00 c1 17 40 00 35 14 40 00 35 14 40 00     5.@...@.5.@.5.@.
  4000ac:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  4000bc:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  4000cc:	35 14 40 00 00 00 00 00 35 14 40 00 00 00 00 00     5.@.....5.@.....
  4000dc:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  4000ec:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  4000fc:	35 14 40 00 35 14 40 00 35 14 40 00 35 14 40 00     5.@.5.@.5.@.5.@.
  40010c:	35 14 40 00 35 14 40 00 00 00 00 00 00 00 00 00     5.@.5.@.........
  40011c:	00 00 00 00 35 14 40 00 35 14 40 00 35 14 40 00     ....5.@.5.@.5.@.
  40012c:	35 14 40 00 35 14 40 00 00 00 00 00 35 14 40 00     5.@.5.@.....5.@.
  40013c:	35 14 40 00                                         5.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	0040255c 	.word	0x0040255c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040255c 	.word	0x0040255c
  4001a0:	20400450 	.word	0x20400450
  4001a4:	0040255c 	.word	0x0040255c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	20400468 	.word	0x20400468

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	20400468 	.word	0x20400468

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	20400468 	.word	0x20400468

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	20400468 	.word	0x20400468

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	0040111d 	.word	0x0040111d

0040029c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002b2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
		if (!timeout--) {
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002de:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
		return -1;
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
{
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ac:	2000      	movs	r0, #0
}
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
        return -1;
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr

004003ba <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003ba:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003bc:	0189      	lsls	r1, r1, #6
  4003be:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003c0:	2402      	movs	r4, #2
  4003c2:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4003c4:	f04f 31ff 	mov.w	r1, #4294967295
  4003c8:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4003ca:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4003cc:	605a      	str	r2, [r3, #4]
}
  4003ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003d2:	4770      	bx	lr

004003d4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4003d4:	0189      	lsls	r1, r1, #6
  4003d6:	2305      	movs	r3, #5
  4003d8:	5043      	str	r3, [r0, r1]
  4003da:	4770      	bx	lr

004003dc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4003dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4003e0:	61ca      	str	r2, [r1, #28]
  4003e2:	4770      	bx	lr

004003e4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4003e8:	624a      	str	r2, [r1, #36]	; 0x24
  4003ea:	4770      	bx	lr

004003ec <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4003f0:	6a08      	ldr	r0, [r1, #32]
}
  4003f2:	4770      	bx	lr

004003f4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003f8:	2402      	movs	r4, #2
  4003fa:	9401      	str	r4, [sp, #4]
  4003fc:	2408      	movs	r4, #8
  4003fe:	9402      	str	r4, [sp, #8]
  400400:	2420      	movs	r4, #32
  400402:	9403      	str	r4, [sp, #12]
  400404:	2480      	movs	r4, #128	; 0x80
  400406:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40040a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40040c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40040e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400412:	d814      	bhi.n	40043e <tc_find_mck_divisor+0x4a>
  400414:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400416:	42a0      	cmp	r0, r4
  400418:	d217      	bcs.n	40044a <tc_find_mck_divisor+0x56>
  40041a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40041c:	af01      	add	r7, sp, #4
  40041e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400422:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400426:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400428:	4284      	cmp	r4, r0
  40042a:	d30a      	bcc.n	400442 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40042c:	4286      	cmp	r6, r0
  40042e:	d90d      	bls.n	40044c <tc_find_mck_divisor+0x58>
			ul_index++) {
  400430:	3501      	adds	r5, #1
	for (ul_index = 0;
  400432:	2d05      	cmp	r5, #5
  400434:	d1f3      	bne.n	40041e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400436:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400438:	b006      	add	sp, #24
  40043a:	bcf0      	pop	{r4, r5, r6, r7}
  40043c:	4770      	bx	lr
			return 0;
  40043e:	2000      	movs	r0, #0
  400440:	e7fa      	b.n	400438 <tc_find_mck_divisor+0x44>
  400442:	2000      	movs	r0, #0
  400444:	e7f8      	b.n	400438 <tc_find_mck_divisor+0x44>
	return 1;
  400446:	2001      	movs	r0, #1
  400448:	e7f6      	b.n	400438 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40044a:	2500      	movs	r5, #0
	if (p_uldiv) {
  40044c:	b12a      	cbz	r2, 40045a <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40044e:	a906      	add	r1, sp, #24
  400450:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400454:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400458:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40045a:	2b00      	cmp	r3, #0
  40045c:	d0f3      	beq.n	400446 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40045e:	601d      	str	r5, [r3, #0]
	return 1;
  400460:	2001      	movs	r0, #1
  400462:	e7e9      	b.n	400438 <tc_find_mck_divisor+0x44>

00400464 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400464:	4b01      	ldr	r3, [pc, #4]	; (40046c <gfx_mono_set_framebuffer+0x8>)
  400466:	6018      	str	r0, [r3, #0]
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	2040046c 	.word	0x2040046c

00400470 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <gfx_mono_framebuffer_put_byte+0xc>)
  400472:	681b      	ldr	r3, [r3, #0]
  400474:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400478:	5442      	strb	r2, [r0, r1]
  40047a:	4770      	bx	lr
  40047c:	2040046c 	.word	0x2040046c

00400480 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <gfx_mono_framebuffer_get_byte+0xc>)
  400482:	681b      	ldr	r3, [r3, #0]
  400484:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400488:	5c40      	ldrb	r0, [r0, r1]
  40048a:	4770      	bx	lr
  40048c:	2040046c 	.word	0x2040046c

00400490 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400494:	1884      	adds	r4, r0, r2
  400496:	2c80      	cmp	r4, #128	; 0x80
  400498:	dd02      	ble.n	4004a0 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40049a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40049e:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4004a0:	b322      	cbz	r2, 4004ec <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4004a2:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4004a4:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4004a8:	2601      	movs	r6, #1
  4004aa:	fa06 f101 	lsl.w	r1, r6, r1
  4004ae:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4004b0:	2b01      	cmp	r3, #1
  4004b2:	d01d      	beq.n	4004f0 <gfx_mono_generic_draw_horizontal_line+0x60>
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d035      	beq.n	400524 <gfx_mono_generic_draw_horizontal_line+0x94>
  4004b8:	2b02      	cmp	r3, #2
  4004ba:	d117      	bne.n	4004ec <gfx_mono_generic_draw_horizontal_line+0x5c>
  4004bc:	3801      	subs	r0, #1
  4004be:	b2c7      	uxtb	r7, r0
  4004c0:	19d4      	adds	r4, r2, r7
  4004c2:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4004c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4004c8:	f04f 0900 	mov.w	r9, #0
  4004cc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4004d0:	4621      	mov	r1, r4
  4004d2:	4628      	mov	r0, r5
  4004d4:	47d0      	blx	sl
			temp ^= pixelmask;
  4004d6:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4004da:	464b      	mov	r3, r9
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	4621      	mov	r1, r4
  4004e0:	4628      	mov	r0, r5
  4004e2:	47c0      	blx	r8
  4004e4:	3c01      	subs	r4, #1
  4004e6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4004e8:	42bc      	cmp	r4, r7
  4004ea:	d1f1      	bne.n	4004d0 <gfx_mono_generic_draw_horizontal_line+0x40>
  4004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4004f0:	3801      	subs	r0, #1
  4004f2:	b2c7      	uxtb	r7, r0
  4004f4:	19d4      	adds	r4, r2, r7
  4004f6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4004f8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4004fc:	f04f 0900 	mov.w	r9, #0
  400500:	f8df 8058 	ldr.w	r8, [pc, #88]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400504:	4621      	mov	r1, r4
  400506:	4628      	mov	r0, r5
  400508:	47d0      	blx	sl
			temp |= pixelmask;
  40050a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40050e:	464b      	mov	r3, r9
  400510:	b2d2      	uxtb	r2, r2
  400512:	4621      	mov	r1, r4
  400514:	4628      	mov	r0, r5
  400516:	47c0      	blx	r8
  400518:	3c01      	subs	r4, #1
  40051a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40051c:	42bc      	cmp	r4, r7
  40051e:	d1f1      	bne.n	400504 <gfx_mono_generic_draw_horizontal_line+0x74>
  400520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400524:	3801      	subs	r0, #1
  400526:	b2c7      	uxtb	r7, r0
  400528:	19d4      	adds	r4, r2, r7
  40052a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40052c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400558 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400530:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400532:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40055c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400536:	4621      	mov	r1, r4
  400538:	4628      	mov	r0, r5
  40053a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40053c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400540:	2300      	movs	r3, #0
  400542:	b2d2      	uxtb	r2, r2
  400544:	4621      	mov	r1, r4
  400546:	4628      	mov	r0, r5
  400548:	47c8      	blx	r9
  40054a:	3c01      	subs	r4, #1
  40054c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40054e:	42bc      	cmp	r4, r7
  400550:	d1f1      	bne.n	400536 <gfx_mono_generic_draw_horizontal_line+0xa6>
  400552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400556:	bf00      	nop
  400558:	0040094d 	.word	0x0040094d
  40055c:	00400849 	.word	0x00400849

00400560 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  400560:	2a00      	cmp	r2, #0
  400562:	d048      	beq.n	4005f6 <gfx_mono_generic_draw_vertical_line+0x96>
{
  400564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400568:	4614      	mov	r4, r2
  40056a:	461f      	mov	r7, r3
  40056c:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  40056e:	1e4a      	subs	r2, r1, #1
  400570:	4422      	add	r2, r4
  400572:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  400574:	4291      	cmp	r1, r2
  400576:	d031      	beq.n	4005dc <gfx_mono_generic_draw_vertical_line+0x7c>
  400578:	2a1f      	cmp	r2, #31
  40057a:	bf28      	it	cs
  40057c:	221f      	movcs	r2, #31
  40057e:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400580:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  400582:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  400586:	f001 0207 	and.w	r2, r1, #7
  40058a:	23ff      	movs	r3, #255	; 0xff
  40058c:	fa03 f202 	lsl.w	r2, r3, r2
  400590:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  400592:	f005 0507 	and.w	r5, r5, #7
  400596:	f1c5 0507 	rsb	r5, r5, #7
  40059a:	fa43 f505 	asr.w	r5, r3, r5
  40059e:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  4005a0:	4544      	cmp	r4, r8
  4005a2:	d020      	beq.n	4005e6 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  4005a4:	463b      	mov	r3, r7
  4005a6:	4601      	mov	r1, r0
  4005a8:	4620      	mov	r0, r4
  4005aa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4005f8 <gfx_mono_generic_draw_vertical_line+0x98>
  4005ae:	47c8      	blx	r9

		while (++y1page < y2page) {
  4005b0:	3401      	adds	r4, #1
  4005b2:	45a0      	cmp	r8, r4
  4005b4:	d90a      	bls.n	4005cc <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  4005b6:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4005ba:	463b      	mov	r3, r7
  4005bc:	4652      	mov	r2, sl
  4005be:	4631      	mov	r1, r6
  4005c0:	4620      	mov	r0, r4
  4005c2:	47c8      	blx	r9
		while (++y1page < y2page) {
  4005c4:	3401      	adds	r4, #1
  4005c6:	b2e4      	uxtb	r4, r4
  4005c8:	45a0      	cmp	r8, r4
  4005ca:	d8f6      	bhi.n	4005ba <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  4005cc:	463b      	mov	r3, r7
  4005ce:	462a      	mov	r2, r5
  4005d0:	4631      	mov	r1, r6
  4005d2:	4640      	mov	r0, r8
  4005d4:	4c08      	ldr	r4, [pc, #32]	; (4005f8 <gfx_mono_generic_draw_vertical_line+0x98>)
  4005d6:	47a0      	blx	r4
  4005d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  4005dc:	461a      	mov	r2, r3
  4005de:	4b07      	ldr	r3, [pc, #28]	; (4005fc <gfx_mono_generic_draw_vertical_line+0x9c>)
  4005e0:	4798      	blx	r3
		return;
  4005e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  4005e6:	463b      	mov	r3, r7
  4005e8:	402a      	ands	r2, r5
  4005ea:	4601      	mov	r1, r0
  4005ec:	4620      	mov	r0, r4
  4005ee:	4c02      	ldr	r4, [pc, #8]	; (4005f8 <gfx_mono_generic_draw_vertical_line+0x98>)
  4005f0:	47a0      	blx	r4
  4005f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005f6:	4770      	bx	lr
  4005f8:	00400959 	.word	0x00400959
  4005fc:	004008e9 	.word	0x004008e9

00400600 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400604:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400608:	b18b      	cbz	r3, 40062e <gfx_mono_generic_draw_filled_rect+0x2e>
  40060a:	461c      	mov	r4, r3
  40060c:	4690      	mov	r8, r2
  40060e:	4606      	mov	r6, r0
  400610:	1e4d      	subs	r5, r1, #1
  400612:	b2ed      	uxtb	r5, r5
  400614:	442c      	add	r4, r5
  400616:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400618:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400634 <gfx_mono_generic_draw_filled_rect+0x34>
  40061c:	463b      	mov	r3, r7
  40061e:	4642      	mov	r2, r8
  400620:	4621      	mov	r1, r4
  400622:	4630      	mov	r0, r6
  400624:	47c8      	blx	r9
  400626:	3c01      	subs	r4, #1
  400628:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40062a:	42ac      	cmp	r4, r5
  40062c:	d1f6      	bne.n	40061c <gfx_mono_generic_draw_filled_rect+0x1c>
  40062e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400632:	bf00      	nop
  400634:	00400491 	.word	0x00400491

00400638 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  400638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40063c:	b085      	sub	sp, #20
  40063e:	4681      	mov	r9, r0
  400640:	9100      	str	r1, [sp, #0]
  400642:	9301      	str	r3, [sp, #4]
  400644:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400648:	b17a      	cbz	r2, 40066a <gfx_mono_generic_draw_filled_circle+0x32>
  40064a:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  40064c:	0055      	lsls	r5, r2, #1
  40064e:	f1c5 0503 	rsb	r5, r5, #3
  400652:	2701      	movs	r7, #1
  400654:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  400658:	f00b 0303 	and.w	r3, fp, #3
  40065c:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  40065e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 400750 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  400662:	f00b 030c 	and.w	r3, fp, #12
  400666:	9303      	str	r3, [sp, #12]
  400668:	e04d      	b.n	400706 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  40066a:	461a      	mov	r2, r3
  40066c:	4b37      	ldr	r3, [pc, #220]	; (40074c <gfx_mono_generic_draw_filled_circle+0x114>)
  40066e:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  400670:	b005      	add	sp, #20
  400672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  400676:	9b00      	ldr	r3, [sp, #0]
  400678:	1b19      	subs	r1, r3, r4
  40067a:	eb09 0006 	add.w	r0, r9, r6
  40067e:	9b01      	ldr	r3, [sp, #4]
  400680:	463a      	mov	r2, r7
  400682:	b2c9      	uxtb	r1, r1
  400684:	b2c0      	uxtb	r0, r0
  400686:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400688:	1c72      	adds	r2, r6, #1
  40068a:	9900      	ldr	r1, [sp, #0]
  40068c:	1b89      	subs	r1, r1, r6
  40068e:	eb09 0004 	add.w	r0, r9, r4
  400692:	9b01      	ldr	r3, [sp, #4]
  400694:	b2d2      	uxtb	r2, r2
  400696:	b2c9      	uxtb	r1, r1
  400698:	b2c0      	uxtb	r0, r0
  40069a:	47d0      	blx	sl
  40069c:	e038      	b.n	400710 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  40069e:	9b00      	ldr	r3, [sp, #0]
  4006a0:	1b19      	subs	r1, r3, r4
  4006a2:	eba9 0006 	sub.w	r0, r9, r6
  4006a6:	9b01      	ldr	r3, [sp, #4]
  4006a8:	463a      	mov	r2, r7
  4006aa:	b2c9      	uxtb	r1, r1
  4006ac:	b2c0      	uxtb	r0, r0
  4006ae:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  4006b0:	1c72      	adds	r2, r6, #1
  4006b2:	9900      	ldr	r1, [sp, #0]
  4006b4:	1b89      	subs	r1, r1, r6
  4006b6:	eba9 0004 	sub.w	r0, r9, r4
  4006ba:	9b01      	ldr	r3, [sp, #4]
  4006bc:	b2d2      	uxtb	r2, r2
  4006be:	b2c9      	uxtb	r1, r1
  4006c0:	b2c0      	uxtb	r0, r0
  4006c2:	47d0      	blx	sl
  4006c4:	e027      	b.n	400716 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  4006c6:	eba9 0006 	sub.w	r0, r9, r6
  4006ca:	9b01      	ldr	r3, [sp, #4]
  4006cc:	463a      	mov	r2, r7
  4006ce:	9900      	ldr	r1, [sp, #0]
  4006d0:	b2c0      	uxtb	r0, r0
  4006d2:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  4006d4:	1c72      	adds	r2, r6, #1
  4006d6:	eba9 0004 	sub.w	r0, r9, r4
  4006da:	9b01      	ldr	r3, [sp, #4]
  4006dc:	b2d2      	uxtb	r2, r2
  4006de:	9900      	ldr	r1, [sp, #0]
  4006e0:	b2c0      	uxtb	r0, r0
  4006e2:	47d0      	blx	sl
  4006e4:	e01a      	b.n	40071c <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  4006e6:	2d00      	cmp	r5, #0
  4006e8:	db2b      	blt.n	400742 <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  4006ea:	1ba4      	subs	r4, r4, r6
  4006ec:	350a      	adds	r5, #10
  4006ee:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  4006f2:	b225      	sxth	r5, r4
			--offset_y;
  4006f4:	3e01      	subs	r6, #1
  4006f6:	b2f6      	uxtb	r6, r6
  4006f8:	f108 0801 	add.w	r8, r8, #1
  4006fc:	1c7b      	adds	r3, r7, #1
  4006fe:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400700:	42be      	cmp	r6, r7
  400702:	d3b5      	bcc.n	400670 <gfx_mono_generic_draw_filled_circle+0x38>
  400704:	461f      	mov	r7, r3
  400706:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  40070a:	9b02      	ldr	r3, [sp, #8]
  40070c:	2b00      	cmp	r3, #0
  40070e:	d1b2      	bne.n	400676 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  400710:	9b03      	ldr	r3, [sp, #12]
  400712:	2b00      	cmp	r3, #0
  400714:	d1c3      	bne.n	40069e <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400716:	f01b 0f30 	tst.w	fp, #48	; 0x30
  40071a:	d1d4      	bne.n	4006c6 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  40071c:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  400720:	d0e1      	beq.n	4006e6 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  400722:	eb09 0006 	add.w	r0, r9, r6
  400726:	9b01      	ldr	r3, [sp, #4]
  400728:	463a      	mov	r2, r7
  40072a:	9900      	ldr	r1, [sp, #0]
  40072c:	b2c0      	uxtb	r0, r0
  40072e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400730:	1c72      	adds	r2, r6, #1
  400732:	eb09 0004 	add.w	r0, r9, r4
  400736:	9b01      	ldr	r3, [sp, #4]
  400738:	b2d2      	uxtb	r2, r2
  40073a:	9900      	ldr	r1, [sp, #0]
  40073c:	b2c0      	uxtb	r0, r0
  40073e:	47d0      	blx	sl
  400740:	e7d1      	b.n	4006e6 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  400742:	3506      	adds	r5, #6
  400744:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400748:	b22d      	sxth	r5, r5
  40074a:	e7d5      	b.n	4006f8 <gfx_mono_generic_draw_filled_circle+0xc0>
  40074c:	004008e9 	.word	0x004008e9
  400750:	00400561 	.word	0x00400561

00400754 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400758:	b083      	sub	sp, #12
  40075a:	4604      	mov	r4, r0
  40075c:	4688      	mov	r8, r1
  40075e:	4691      	mov	r9, r2
  400760:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400762:	7a5b      	ldrb	r3, [r3, #9]
  400764:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400768:	2100      	movs	r1, #0
  40076a:	9100      	str	r1, [sp, #0]
  40076c:	4649      	mov	r1, r9
  40076e:	4640      	mov	r0, r8
  400770:	4d21      	ldr	r5, [pc, #132]	; (4007f8 <gfx_mono_draw_char+0xa4>)
  400772:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400774:	f89b 3000 	ldrb.w	r3, [fp]
  400778:	b113      	cbz	r3, 400780 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40077a:	b003      	add	sp, #12
  40077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400780:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400784:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400786:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40078a:	bf18      	it	ne
  40078c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40078e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400792:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400796:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400798:	fb17 f70a 	smulbb	r7, r7, sl
  40079c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a0:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007a4:	fa13 f787 	uxtah	r7, r3, r7
  4007a8:	e01f      	b.n	4007ea <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007aa:	0064      	lsls	r4, r4, #1
  4007ac:	b2e4      	uxtb	r4, r4
  4007ae:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b0:	b2eb      	uxtb	r3, r5
  4007b2:	429e      	cmp	r6, r3
  4007b4:	d910      	bls.n	4007d8 <gfx_mono_draw_char+0x84>
  4007b6:	b2eb      	uxtb	r3, r5
  4007b8:	eb08 0003 	add.w	r0, r8, r3
  4007bc:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007be:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007c2:	bf08      	it	eq
  4007c4:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007c8:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007cc:	d0ed      	beq.n	4007aa <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007ce:	2201      	movs	r2, #1
  4007d0:	4649      	mov	r1, r9
  4007d2:	4b0a      	ldr	r3, [pc, #40]	; (4007fc <gfx_mono_draw_char+0xa8>)
  4007d4:	4798      	blx	r3
  4007d6:	e7e8      	b.n	4007aa <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007d8:	f109 0901 	add.w	r9, r9, #1
  4007dc:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007e4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007e8:	d0c7      	beq.n	40077a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007ea:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007ee:	2e00      	cmp	r6, #0
  4007f0:	d0f2      	beq.n	4007d8 <gfx_mono_draw_char+0x84>
  4007f2:	2500      	movs	r5, #0
  4007f4:	462c      	mov	r4, r5
  4007f6:	e7de      	b.n	4007b6 <gfx_mono_draw_char+0x62>
  4007f8:	00400601 	.word	0x00400601
  4007fc:	004008e9 	.word	0x004008e9

00400800 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400804:	4604      	mov	r4, r0
  400806:	4690      	mov	r8, r2
  400808:	461d      	mov	r5, r3
  40080a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40080c:	4f0d      	ldr	r7, [pc, #52]	; (400844 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40080e:	460e      	mov	r6, r1
  400810:	e008      	b.n	400824 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400812:	7a6a      	ldrb	r2, [r5, #9]
  400814:	3201      	adds	r2, #1
  400816:	4442      	add	r2, r8
  400818:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40081c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40081e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400822:	b16b      	cbz	r3, 400840 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400824:	7820      	ldrb	r0, [r4, #0]
  400826:	280a      	cmp	r0, #10
  400828:	d0f3      	beq.n	400812 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40082a:	280d      	cmp	r0, #13
  40082c:	d0f7      	beq.n	40081e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40082e:	462b      	mov	r3, r5
  400830:	4642      	mov	r2, r8
  400832:	4649      	mov	r1, r9
  400834:	47b8      	blx	r7
			x += font->width;
  400836:	7a2b      	ldrb	r3, [r5, #8]
  400838:	4499      	add	r9, r3
  40083a:	fa5f f989 	uxtb.w	r9, r9
  40083e:	e7ee      	b.n	40081e <gfx_mono_draw_string+0x1e>
}
  400840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400844:	00400755 	.word	0x00400755

00400848 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400848:	b570      	push	{r4, r5, r6, lr}
  40084a:	4604      	mov	r4, r0
  40084c:	460d      	mov	r5, r1
  40084e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400850:	b91b      	cbnz	r3, 40085a <gfx_mono_ssd1306_put_byte+0x12>
  400852:	4b0d      	ldr	r3, [pc, #52]	; (400888 <gfx_mono_ssd1306_put_byte+0x40>)
  400854:	4798      	blx	r3
  400856:	42b0      	cmp	r0, r6
  400858:	d015      	beq.n	400886 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40085a:	4632      	mov	r2, r6
  40085c:	4629      	mov	r1, r5
  40085e:	4620      	mov	r0, r4
  400860:	4b0a      	ldr	r3, [pc, #40]	; (40088c <gfx_mono_ssd1306_put_byte+0x44>)
  400862:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400864:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400868:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40086c:	4c08      	ldr	r4, [pc, #32]	; (400890 <gfx_mono_ssd1306_put_byte+0x48>)
  40086e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400870:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400874:	f040 0010 	orr.w	r0, r0, #16
  400878:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40087a:	f005 000f 	and.w	r0, r5, #15
  40087e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400880:	4630      	mov	r0, r6
  400882:	4b04      	ldr	r3, [pc, #16]	; (400894 <gfx_mono_ssd1306_put_byte+0x4c>)
  400884:	4798      	blx	r3
  400886:	bd70      	pop	{r4, r5, r6, pc}
  400888:	00400481 	.word	0x00400481
  40088c:	00400471 	.word	0x00400471
  400890:	0040099d 	.word	0x0040099d
  400894:	00400bbd 	.word	0x00400bbd

00400898 <gfx_mono_ssd1306_init>:
{
  400898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40089c:	480d      	ldr	r0, [pc, #52]	; (4008d4 <gfx_mono_ssd1306_init+0x3c>)
  40089e:	4b0e      	ldr	r3, [pc, #56]	; (4008d8 <gfx_mono_ssd1306_init+0x40>)
  4008a0:	4798      	blx	r3
	ssd1306_init();
  4008a2:	4b0e      	ldr	r3, [pc, #56]	; (4008dc <gfx_mono_ssd1306_init+0x44>)
  4008a4:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008a6:	2040      	movs	r0, #64	; 0x40
  4008a8:	4b0d      	ldr	r3, [pc, #52]	; (4008e0 <gfx_mono_ssd1306_init+0x48>)
  4008aa:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008ac:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008ae:	f04f 0801 	mov.w	r8, #1
  4008b2:	462f      	mov	r7, r5
  4008b4:	4e0b      	ldr	r6, [pc, #44]	; (4008e4 <gfx_mono_ssd1306_init+0x4c>)
{
  4008b6:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b8:	4643      	mov	r3, r8
  4008ba:	463a      	mov	r2, r7
  4008bc:	b2e1      	uxtb	r1, r4
  4008be:	4628      	mov	r0, r5
  4008c0:	47b0      	blx	r6
  4008c2:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008c4:	2c80      	cmp	r4, #128	; 0x80
  4008c6:	d1f7      	bne.n	4008b8 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008c8:	3501      	adds	r5, #1
  4008ca:	b2ed      	uxtb	r5, r5
  4008cc:	2d04      	cmp	r5, #4
  4008ce:	d1f2      	bne.n	4008b6 <gfx_mono_ssd1306_init+0x1e>
  4008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008d4:	20400470 	.word	0x20400470
  4008d8:	00400465 	.word	0x00400465
  4008dc:	004009dd 	.word	0x004009dd
  4008e0:	0040099d 	.word	0x0040099d
  4008e4:	00400849 	.word	0x00400849

004008e8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008e8:	09c3      	lsrs	r3, r0, #7
  4008ea:	d12a      	bne.n	400942 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008ec:	291f      	cmp	r1, #31
  4008ee:	d828      	bhi.n	400942 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008f4:	4614      	mov	r4, r2
  4008f6:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4008f8:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4008fa:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4008fe:	2201      	movs	r2, #1
  400900:	fa02 f701 	lsl.w	r7, r2, r1
  400904:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400908:	4601      	mov	r1, r0
  40090a:	4630      	mov	r0, r6
  40090c:	4b0d      	ldr	r3, [pc, #52]	; (400944 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40090e:	4798      	blx	r3
  400910:	4602      	mov	r2, r0
	switch (color) {
  400912:	2c01      	cmp	r4, #1
  400914:	d009      	beq.n	40092a <gfx_mono_ssd1306_draw_pixel+0x42>
  400916:	b164      	cbz	r4, 400932 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400918:	2c02      	cmp	r4, #2
  40091a:	d00e      	beq.n	40093a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  40091c:	2300      	movs	r3, #0
  40091e:	4629      	mov	r1, r5
  400920:	4630      	mov	r0, r6
  400922:	4c09      	ldr	r4, [pc, #36]	; (400948 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400924:	47a0      	blx	r4
  400926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40092a:	ea48 0200 	orr.w	r2, r8, r0
  40092e:	b2d2      	uxtb	r2, r2
		break;
  400930:	e7f4      	b.n	40091c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400932:	ea20 0207 	bic.w	r2, r0, r7
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f0      	b.n	40091c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40093a:	ea88 0200 	eor.w	r2, r8, r0
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7ec      	b.n	40091c <gfx_mono_ssd1306_draw_pixel+0x34>
  400942:	4770      	bx	lr
  400944:	00400481 	.word	0x00400481
  400948:	00400849 	.word	0x00400849

0040094c <gfx_mono_ssd1306_get_byte>:
{
  40094c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  40094e:	4b01      	ldr	r3, [pc, #4]	; (400954 <gfx_mono_ssd1306_get_byte+0x8>)
  400950:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400952:	bd08      	pop	{r3, pc}
  400954:	00400481 	.word	0x00400481

00400958 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40095a:	4605      	mov	r5, r0
  40095c:	460e      	mov	r6, r1
  40095e:	4617      	mov	r7, r2
  400960:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400962:	4b0c      	ldr	r3, [pc, #48]	; (400994 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400964:	4798      	blx	r3
  400966:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400968:	2c01      	cmp	r4, #1
  40096a:	d008      	beq.n	40097e <gfx_mono_ssd1306_mask_byte+0x26>
  40096c:	b154      	cbz	r4, 400984 <gfx_mono_ssd1306_mask_byte+0x2c>
  40096e:	2c02      	cmp	r4, #2
  400970:	d00c      	beq.n	40098c <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400972:	2300      	movs	r3, #0
  400974:	4631      	mov	r1, r6
  400976:	4628      	mov	r0, r5
  400978:	4c07      	ldr	r4, [pc, #28]	; (400998 <gfx_mono_ssd1306_mask_byte+0x40>)
  40097a:	47a0      	blx	r4
  40097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  40097e:	433a      	orrs	r2, r7
  400980:	b2d2      	uxtb	r2, r2
		break;
  400982:	e7f6      	b.n	400972 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400984:	ea20 0207 	bic.w	r2, r0, r7
  400988:	b2d2      	uxtb	r2, r2
		break;
  40098a:	e7f2      	b.n	400972 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  40098c:	407a      	eors	r2, r7
  40098e:	b2d2      	uxtb	r2, r2
		break;
  400990:	e7ef      	b.n	400972 <gfx_mono_ssd1306_mask_byte+0x1a>
  400992:	bf00      	nop
  400994:	00400481 	.word	0x00400481
  400998:	00400849 	.word	0x00400849

0040099c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  40099c:	b538      	push	{r3, r4, r5, lr}
  40099e:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009a0:	2208      	movs	r2, #8
  4009a2:	4b09      	ldr	r3, [pc, #36]	; (4009c8 <ssd1306_write_command+0x2c>)
  4009a4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4009a6:	4c09      	ldr	r4, [pc, #36]	; (4009cc <ssd1306_write_command+0x30>)
  4009a8:	2101      	movs	r1, #1
  4009aa:	4620      	mov	r0, r4
  4009ac:	4b08      	ldr	r3, [pc, #32]	; (4009d0 <ssd1306_write_command+0x34>)
  4009ae:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4009b0:	2301      	movs	r3, #1
  4009b2:	461a      	mov	r2, r3
  4009b4:	4629      	mov	r1, r5
  4009b6:	4620      	mov	r0, r4
  4009b8:	4c06      	ldr	r4, [pc, #24]	; (4009d4 <ssd1306_write_command+0x38>)
  4009ba:	47a0      	blx	r4
	delay_us(10);
  4009bc:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4009c0:	4b05      	ldr	r3, [pc, #20]	; (4009d8 <ssd1306_write_command+0x3c>)
  4009c2:	4798      	blx	r3
  4009c4:	bd38      	pop	{r3, r4, r5, pc}
  4009c6:	bf00      	nop
  4009c8:	400e1000 	.word	0x400e1000
  4009cc:	40008000 	.word	0x40008000
  4009d0:	0040029d 	.word	0x0040029d
  4009d4:	004002b3 	.word	0x004002b3
  4009d8:	20400001 	.word	0x20400001

004009dc <ssd1306_init>:
{
  4009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009e0:	4d66      	ldr	r5, [pc, #408]	; (400b7c <ssd1306_init+0x1a0>)
  4009e2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009e6:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009e8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009ec:	4b64      	ldr	r3, [pc, #400]	; (400b80 <ssd1306_init+0x1a4>)
  4009ee:	2708      	movs	r7, #8
  4009f0:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009f2:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009f6:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009f8:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009fc:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009fe:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a00:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a04:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400a06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a0a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a0c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400a0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a12:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400a14:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a16:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a1a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a1c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a1e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a24:	f022 0208 	bic.w	r2, r2, #8
  400a28:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a2c:	f022 0208 	bic.w	r2, r2, #8
  400a30:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400a32:	601f      	str	r7, [r3, #0]
  400a34:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a36:	631f      	str	r7, [r3, #48]	; 0x30
  400a38:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a3a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400bb8 <ssd1306_init+0x1dc>
  400a3e:	2300      	movs	r3, #0
  400a40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a48:	4640      	mov	r0, r8
  400a4a:	4c4e      	ldr	r4, [pc, #312]	; (400b84 <ssd1306_init+0x1a8>)
  400a4c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a4e:	2300      	movs	r3, #0
  400a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a54:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a58:	4640      	mov	r0, r8
  400a5a:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a5c:	2300      	movs	r3, #0
  400a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a66:	4640      	mov	r0, r8
  400a68:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a6a:	2300      	movs	r3, #0
  400a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a74:	4640      	mov	r0, r8
  400a76:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a78:	2300      	movs	r3, #0
  400a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a7e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a82:	4640      	mov	r0, r8
  400a84:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a86:	2300      	movs	r3, #0
  400a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a8c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a90:	4640      	mov	r0, r8
  400a92:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a94:	4c3c      	ldr	r4, [pc, #240]	; (400b88 <ssd1306_init+0x1ac>)
  400a96:	f04f 0902 	mov.w	r9, #2
  400a9a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a9e:	f04f 0880 	mov.w	r8, #128	; 0x80
  400aa2:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400aa6:	6863      	ldr	r3, [r4, #4]
  400aa8:	f043 0301 	orr.w	r3, r3, #1
  400aac:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400aae:	463a      	mov	r2, r7
  400ab0:	2101      	movs	r1, #1
  400ab2:	4620      	mov	r0, r4
  400ab4:	4b35      	ldr	r3, [pc, #212]	; (400b8c <ssd1306_init+0x1b0>)
  400ab6:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400ab8:	2200      	movs	r2, #0
  400aba:	2101      	movs	r1, #1
  400abc:	4620      	mov	r0, r4
  400abe:	4b34      	ldr	r3, [pc, #208]	; (400b90 <ssd1306_init+0x1b4>)
  400ac0:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400ac2:	2200      	movs	r2, #0
  400ac4:	2101      	movs	r1, #1
  400ac6:	4620      	mov	r0, r4
  400ac8:	4b32      	ldr	r3, [pc, #200]	; (400b94 <ssd1306_init+0x1b8>)
  400aca:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400acc:	6863      	ldr	r3, [r4, #4]
  400ace:	f023 0302 	bic.w	r3, r3, #2
  400ad2:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400ad4:	2200      	movs	r2, #0
  400ad6:	2101      	movs	r1, #1
  400ad8:	4620      	mov	r0, r4
  400ada:	4b2f      	ldr	r3, [pc, #188]	; (400b98 <ssd1306_init+0x1bc>)
  400adc:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400ade:	6863      	ldr	r3, [r4, #4]
  400ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400ae4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400ae6:	6863      	ldr	r3, [r4, #4]
  400ae8:	f043 0310 	orr.w	r3, r3, #16
  400aec:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400aee:	492b      	ldr	r1, [pc, #172]	; (400b9c <ssd1306_init+0x1c0>)
  400af0:	482b      	ldr	r0, [pc, #172]	; (400ba0 <ssd1306_init+0x1c4>)
  400af2:	4b2c      	ldr	r3, [pc, #176]	; (400ba4 <ssd1306_init+0x1c8>)
  400af4:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400af6:	b2c2      	uxtb	r2, r0
  400af8:	2101      	movs	r1, #1
  400afa:	4620      	mov	r0, r4
  400afc:	4b2a      	ldr	r3, [pc, #168]	; (400ba8 <ssd1306_init+0x1cc>)
  400afe:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400b00:	4620      	mov	r0, r4
  400b02:	4b2a      	ldr	r3, [pc, #168]	; (400bac <ssd1306_init+0x1d0>)
  400b04:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b06:	2301      	movs	r3, #1
  400b08:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b0a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400b0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b10:	4c27      	ldr	r4, [pc, #156]	; (400bb0 <ssd1306_init+0x1d4>)
  400b12:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b14:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400b16:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b1a:	47a0      	blx	r4
  400b1c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400b1e:	20a8      	movs	r0, #168	; 0xa8
  400b20:	4c24      	ldr	r4, [pc, #144]	; (400bb4 <ssd1306_init+0x1d8>)
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400b24:	201f      	movs	r0, #31
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400b28:	20d3      	movs	r0, #211	; 0xd3
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400b2c:	2000      	movs	r0, #0
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400b30:	2040      	movs	r0, #64	; 0x40
  400b32:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400b34:	20a1      	movs	r0, #161	; 0xa1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400b38:	20c8      	movs	r0, #200	; 0xc8
  400b3a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b3c:	20da      	movs	r0, #218	; 0xda
  400b3e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b40:	4648      	mov	r0, r9
  400b42:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b44:	2081      	movs	r0, #129	; 0x81
  400b46:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b48:	208f      	movs	r0, #143	; 0x8f
  400b4a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b4c:	20a4      	movs	r0, #164	; 0xa4
  400b4e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b50:	20a6      	movs	r0, #166	; 0xa6
  400b52:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b54:	20d5      	movs	r0, #213	; 0xd5
  400b56:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b58:	4640      	mov	r0, r8
  400b5a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b5c:	208d      	movs	r0, #141	; 0x8d
  400b5e:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b60:	2014      	movs	r0, #20
  400b62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b64:	20db      	movs	r0, #219	; 0xdb
  400b66:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b68:	2040      	movs	r0, #64	; 0x40
  400b6a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b6c:	20d9      	movs	r0, #217	; 0xd9
  400b6e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b70:	20f1      	movs	r0, #241	; 0xf1
  400b72:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b74:	20af      	movs	r0, #175	; 0xaf
  400b76:	47a0      	blx	r4
  400b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b7c:	400e1200 	.word	0x400e1200
  400b80:	400e1000 	.word	0x400e1000
  400b84:	00400ea5 	.word	0x00400ea5
  400b88:	40008000 	.word	0x40008000
  400b8c:	00400323 	.word	0x00400323
  400b90:	004002e7 	.word	0x004002e7
  400b94:	00400305 	.word	0x00400305
  400b98:	00400369 	.word	0x00400369
  400b9c:	08f0d180 	.word	0x08f0d180
  400ba0:	001e8480 	.word	0x001e8480
  400ba4:	0040037d 	.word	0x0040037d
  400ba8:	00400393 	.word	0x00400393
  400bac:	00400271 	.word	0x00400271
  400bb0:	20400001 	.word	0x20400001
  400bb4:	0040099d 	.word	0x0040099d
  400bb8:	400e1400 	.word	0x400e1400

00400bbc <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400bbc:	b538      	push	{r3, r4, r5, lr}
  400bbe:	4605      	mov	r5, r0
  400bc0:	2208      	movs	r2, #8
  400bc2:	4b09      	ldr	r3, [pc, #36]	; (400be8 <ssd1306_write_data+0x2c>)
  400bc4:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400bc6:	4c09      	ldr	r4, [pc, #36]	; (400bec <ssd1306_write_data+0x30>)
  400bc8:	2101      	movs	r1, #1
  400bca:	4620      	mov	r0, r4
  400bcc:	4b08      	ldr	r3, [pc, #32]	; (400bf0 <ssd1306_write_data+0x34>)
  400bce:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400bd0:	2301      	movs	r3, #1
  400bd2:	461a      	mov	r2, r3
  400bd4:	4629      	mov	r1, r5
  400bd6:	4620      	mov	r0, r4
  400bd8:	4c06      	ldr	r4, [pc, #24]	; (400bf4 <ssd1306_write_data+0x38>)
  400bda:	47a0      	blx	r4
	delay_us(10);
  400bdc:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400be0:	4b05      	ldr	r3, [pc, #20]	; (400bf8 <ssd1306_write_data+0x3c>)
  400be2:	4798      	blx	r3
  400be4:	bd38      	pop	{r3, r4, r5, pc}
  400be6:	bf00      	nop
  400be8:	400e1000 	.word	0x400e1000
  400bec:	40008000 	.word	0x40008000
  400bf0:	0040029d 	.word	0x0040029d
  400bf4:	004002b3 	.word	0x004002b3
  400bf8:	20400001 	.word	0x20400001

00400bfc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bfc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bfe:	4810      	ldr	r0, [pc, #64]	; (400c40 <sysclk_init+0x44>)
  400c00:	4b10      	ldr	r3, [pc, #64]	; (400c44 <sysclk_init+0x48>)
  400c02:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c04:	213e      	movs	r1, #62	; 0x3e
  400c06:	2000      	movs	r0, #0
  400c08:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <sysclk_init+0x4c>)
  400c0a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c0c:	4c0f      	ldr	r4, [pc, #60]	; (400c4c <sysclk_init+0x50>)
  400c0e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c10:	2800      	cmp	r0, #0
  400c12:	d0fc      	beq.n	400c0e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c14:	4b0e      	ldr	r3, [pc, #56]	; (400c50 <sysclk_init+0x54>)
  400c16:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c18:	4a0e      	ldr	r2, [pc, #56]	; (400c54 <sysclk_init+0x58>)
  400c1a:	4b0f      	ldr	r3, [pc, #60]	; (400c58 <sysclk_init+0x5c>)
  400c1c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400c1e:	4c0f      	ldr	r4, [pc, #60]	; (400c5c <sysclk_init+0x60>)
  400c20:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c22:	2800      	cmp	r0, #0
  400c24:	d0fc      	beq.n	400c20 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400c26:	2002      	movs	r0, #2
  400c28:	4b0d      	ldr	r3, [pc, #52]	; (400c60 <sysclk_init+0x64>)
  400c2a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c2c:	2000      	movs	r0, #0
  400c2e:	4b0d      	ldr	r3, [pc, #52]	; (400c64 <sysclk_init+0x68>)
  400c30:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c32:	4b0d      	ldr	r3, [pc, #52]	; (400c68 <sysclk_init+0x6c>)
  400c34:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c36:	4802      	ldr	r0, [pc, #8]	; (400c40 <sysclk_init+0x44>)
  400c38:	4b02      	ldr	r3, [pc, #8]	; (400c44 <sysclk_init+0x48>)
  400c3a:	4798      	blx	r3
  400c3c:	bd10      	pop	{r4, pc}
  400c3e:	bf00      	nop
  400c40:	11e1a300 	.word	0x11e1a300
  400c44:	0040160d 	.word	0x0040160d
  400c48:	00401099 	.word	0x00401099
  400c4c:	004010ed 	.word	0x004010ed
  400c50:	004010fd 	.word	0x004010fd
  400c54:	20183f01 	.word	0x20183f01
  400c58:	400e0600 	.word	0x400e0600
  400c5c:	0040110d 	.word	0x0040110d
  400c60:	00400ffd 	.word	0x00400ffd
  400c64:	00401035 	.word	0x00401035
  400c68:	00401501 	.word	0x00401501

00400c6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400c6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c72:	4b48      	ldr	r3, [pc, #288]	; (400d94 <board_init+0x128>)
  400c74:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c7a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400c7e:	4b46      	ldr	r3, [pc, #280]	; (400d98 <board_init+0x12c>)
  400c80:	2200      	movs	r2, #0
  400c82:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400c86:	695a      	ldr	r2, [r3, #20]
  400c88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400c8c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400c8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c92:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400c96:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400c9a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400c9e:	f007 0007 	and.w	r0, r7, #7
  400ca2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400ca4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400ca8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400cac:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400cb0:	f3bf 8f4f 	dsb	sy
  400cb4:	f04f 34ff 	mov.w	r4, #4294967295
  400cb8:	fa04 fc00 	lsl.w	ip, r4, r0
  400cbc:	fa06 f000 	lsl.w	r0, r6, r0
  400cc0:	fa04 f40e 	lsl.w	r4, r4, lr
  400cc4:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400cc8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400cca:	463a      	mov	r2, r7
  400ccc:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400cce:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400cd2:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400cd6:	3a01      	subs	r2, #1
  400cd8:	4423      	add	r3, r4
  400cda:	f1b2 3fff 	cmp.w	r2, #4294967295
  400cde:	d1f6      	bne.n	400cce <board_init+0x62>
        } while(sets--);
  400ce0:	3e01      	subs	r6, #1
  400ce2:	4460      	add	r0, ip
  400ce4:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ce8:	d1ef      	bne.n	400cca <board_init+0x5e>
  400cea:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400cee:	4b2a      	ldr	r3, [pc, #168]	; (400d98 <board_init+0x12c>)
  400cf0:	695a      	ldr	r2, [r3, #20]
  400cf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400cf6:	615a      	str	r2, [r3, #20]
  400cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cfc:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d00:	4a26      	ldr	r2, [pc, #152]	; (400d9c <board_init+0x130>)
  400d02:	4927      	ldr	r1, [pc, #156]	; (400da0 <board_init+0x134>)
  400d04:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d06:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400d0a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d10:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d14:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d18:	f022 0201 	bic.w	r2, r2, #1
  400d1c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d20:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d24:	f022 0201 	bic.w	r2, r2, #1
  400d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d30:	f3bf 8f6f 	isb	sy
  400d34:	200a      	movs	r0, #10
  400d36:	4c1b      	ldr	r4, [pc, #108]	; (400da4 <board_init+0x138>)
  400d38:	47a0      	blx	r4
  400d3a:	200b      	movs	r0, #11
  400d3c:	47a0      	blx	r4
  400d3e:	200c      	movs	r0, #12
  400d40:	47a0      	blx	r4
  400d42:	2010      	movs	r0, #16
  400d44:	47a0      	blx	r4
  400d46:	2011      	movs	r0, #17
  400d48:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d4a:	4b17      	ldr	r3, [pc, #92]	; (400da8 <board_init+0x13c>)
  400d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d50:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d56:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d60:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d66:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d6c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400d6e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400d74:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400d76:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d7a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d7c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d7e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400d82:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400d84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400d8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d92:	bf00      	nop
  400d94:	400e1850 	.word	0x400e1850
  400d98:	e000ed00 	.word	0xe000ed00
  400d9c:	400e0c00 	.word	0x400e0c00
  400da0:	5a00080c 	.word	0x5a00080c
  400da4:	0040111d 	.word	0x0040111d
  400da8:	400e1200 	.word	0x400e1200

00400dac <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400dac:	6301      	str	r1, [r0, #48]	; 0x30
  400dae:	4770      	bx	lr

00400db0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400db0:	6341      	str	r1, [r0, #52]	; 0x34
  400db2:	4770      	bx	lr

00400db4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400db4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400db6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400dba:	d03a      	beq.n	400e32 <pio_set_peripheral+0x7e>
  400dbc:	d813      	bhi.n	400de6 <pio_set_peripheral+0x32>
  400dbe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400dc2:	d025      	beq.n	400e10 <pio_set_peripheral+0x5c>
  400dc4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400dc8:	d10a      	bne.n	400de0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400dcc:	4313      	orrs	r3, r2
  400dce:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dd0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dd2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400dd4:	400b      	ands	r3, r1
  400dd6:	ea23 0302 	bic.w	r3, r3, r2
  400dda:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ddc:	6042      	str	r2, [r0, #4]
  400dde:	4770      	bx	lr
	switch (ul_type) {
  400de0:	2900      	cmp	r1, #0
  400de2:	d1fb      	bne.n	400ddc <pio_set_peripheral+0x28>
  400de4:	4770      	bx	lr
  400de6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400dea:	d021      	beq.n	400e30 <pio_set_peripheral+0x7c>
  400dec:	d809      	bhi.n	400e02 <pio_set_peripheral+0x4e>
  400dee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400df2:	d1f3      	bne.n	400ddc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400df4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400df6:	4313      	orrs	r3, r2
  400df8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dfa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dfc:	4313      	orrs	r3, r2
  400dfe:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e00:	e7ec      	b.n	400ddc <pio_set_peripheral+0x28>
	switch (ul_type) {
  400e02:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e06:	d013      	beq.n	400e30 <pio_set_peripheral+0x7c>
  400e08:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e0c:	d010      	beq.n	400e30 <pio_set_peripheral+0x7c>
  400e0e:	e7e5      	b.n	400ddc <pio_set_peripheral+0x28>
{
  400e10:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e12:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e14:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400e16:	43d3      	mvns	r3, r2
  400e18:	4021      	ands	r1, r4
  400e1a:	461c      	mov	r4, r3
  400e1c:	4019      	ands	r1, r3
  400e1e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e20:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e22:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e24:	400b      	ands	r3, r1
  400e26:	4023      	ands	r3, r4
  400e28:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400e2a:	6042      	str	r2, [r0, #4]
}
  400e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e30:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e32:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e34:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400e36:	400b      	ands	r3, r1
  400e38:	ea23 0302 	bic.w	r3, r3, r2
  400e3c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e3e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e40:	4313      	orrs	r3, r2
  400e42:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e44:	e7ca      	b.n	400ddc <pio_set_peripheral+0x28>

00400e46 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e46:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e48:	f012 0f01 	tst.w	r2, #1
  400e4c:	d10d      	bne.n	400e6a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400e4e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e50:	f012 0f0a 	tst.w	r2, #10
  400e54:	d00b      	beq.n	400e6e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400e56:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400e58:	f012 0f02 	tst.w	r2, #2
  400e5c:	d109      	bne.n	400e72 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400e5e:	f012 0f08 	tst.w	r2, #8
  400e62:	d008      	beq.n	400e76 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400e64:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400e68:	e005      	b.n	400e76 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400e6a:	6641      	str	r1, [r0, #100]	; 0x64
  400e6c:	e7f0      	b.n	400e50 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400e6e:	6241      	str	r1, [r0, #36]	; 0x24
  400e70:	e7f2      	b.n	400e58 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400e72:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400e76:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e78:	6001      	str	r1, [r0, #0]
  400e7a:	4770      	bx	lr

00400e7c <pio_set_output>:
{
  400e7c:	b410      	push	{r4}
  400e7e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400e80:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e82:	b94c      	cbnz	r4, 400e98 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400e84:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400e86:	b14b      	cbz	r3, 400e9c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400e88:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400e8a:	b94a      	cbnz	r2, 400ea0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400e8c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400e8e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e90:	6001      	str	r1, [r0, #0]
}
  400e92:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e96:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400e98:	6641      	str	r1, [r0, #100]	; 0x64
  400e9a:	e7f4      	b.n	400e86 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400e9c:	6541      	str	r1, [r0, #84]	; 0x54
  400e9e:	e7f4      	b.n	400e8a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400ea0:	6301      	str	r1, [r0, #48]	; 0x30
  400ea2:	e7f4      	b.n	400e8e <pio_set_output+0x12>

00400ea4 <pio_configure>:
{
  400ea4:	b570      	push	{r4, r5, r6, lr}
  400ea6:	b082      	sub	sp, #8
  400ea8:	4605      	mov	r5, r0
  400eaa:	4616      	mov	r6, r2
  400eac:	461c      	mov	r4, r3
	switch (ul_type) {
  400eae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400eb2:	d014      	beq.n	400ede <pio_configure+0x3a>
  400eb4:	d90a      	bls.n	400ecc <pio_configure+0x28>
  400eb6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eba:	d024      	beq.n	400f06 <pio_configure+0x62>
  400ebc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ec0:	d021      	beq.n	400f06 <pio_configure+0x62>
  400ec2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ec6:	d017      	beq.n	400ef8 <pio_configure+0x54>
		return 0;
  400ec8:	2000      	movs	r0, #0
  400eca:	e01a      	b.n	400f02 <pio_configure+0x5e>
	switch (ul_type) {
  400ecc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ed0:	d005      	beq.n	400ede <pio_configure+0x3a>
  400ed2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ed6:	d002      	beq.n	400ede <pio_configure+0x3a>
  400ed8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400edc:	d1f4      	bne.n	400ec8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400ede:	4632      	mov	r2, r6
  400ee0:	4628      	mov	r0, r5
  400ee2:	4b11      	ldr	r3, [pc, #68]	; (400f28 <pio_configure+0x84>)
  400ee4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400ee6:	f014 0f01 	tst.w	r4, #1
  400eea:	d102      	bne.n	400ef2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400eec:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400eee:	2001      	movs	r0, #1
  400ef0:	e007      	b.n	400f02 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400ef2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400ef4:	2001      	movs	r0, #1
  400ef6:	e004      	b.n	400f02 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400ef8:	461a      	mov	r2, r3
  400efa:	4631      	mov	r1, r6
  400efc:	4b0b      	ldr	r3, [pc, #44]	; (400f2c <pio_configure+0x88>)
  400efe:	4798      	blx	r3
	return 1;
  400f00:	2001      	movs	r0, #1
}
  400f02:	b002      	add	sp, #8
  400f04:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400f06:	f004 0301 	and.w	r3, r4, #1
  400f0a:	9300      	str	r3, [sp, #0]
  400f0c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400f10:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f14:	bf14      	ite	ne
  400f16:	2200      	movne	r2, #0
  400f18:	2201      	moveq	r2, #1
  400f1a:	4631      	mov	r1, r6
  400f1c:	4628      	mov	r0, r5
  400f1e:	4c04      	ldr	r4, [pc, #16]	; (400f30 <pio_configure+0x8c>)
  400f20:	47a0      	blx	r4
	return 1;
  400f22:	2001      	movs	r0, #1
		break;
  400f24:	e7ed      	b.n	400f02 <pio_configure+0x5e>
  400f26:	bf00      	nop
  400f28:	00400db5 	.word	0x00400db5
  400f2c:	00400e47 	.word	0x00400e47
  400f30:	00400e7d 	.word	0x00400e7d

00400f34 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400f34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400f36:	420b      	tst	r3, r1
}
  400f38:	bf14      	ite	ne
  400f3a:	2001      	movne	r0, #1
  400f3c:	2000      	moveq	r0, #0
  400f3e:	4770      	bx	lr

00400f40 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f40:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f42:	4770      	bx	lr

00400f44 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f44:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f46:	4770      	bx	lr

00400f48 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f4c:	4604      	mov	r4, r0
  400f4e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f50:	4b0e      	ldr	r3, [pc, #56]	; (400f8c <pio_handler_process+0x44>)
  400f52:	4798      	blx	r3
  400f54:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f56:	4620      	mov	r0, r4
  400f58:	4b0d      	ldr	r3, [pc, #52]	; (400f90 <pio_handler_process+0x48>)
  400f5a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f5c:	4005      	ands	r5, r0
  400f5e:	d013      	beq.n	400f88 <pio_handler_process+0x40>
  400f60:	4c0c      	ldr	r4, [pc, #48]	; (400f94 <pio_handler_process+0x4c>)
  400f62:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f66:	e003      	b.n	400f70 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f68:	42b4      	cmp	r4, r6
  400f6a:	d00d      	beq.n	400f88 <pio_handler_process+0x40>
  400f6c:	3410      	adds	r4, #16
		while (status != 0) {
  400f6e:	b15d      	cbz	r5, 400f88 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f70:	6820      	ldr	r0, [r4, #0]
  400f72:	4540      	cmp	r0, r8
  400f74:	d1f8      	bne.n	400f68 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f76:	6861      	ldr	r1, [r4, #4]
  400f78:	4229      	tst	r1, r5
  400f7a:	d0f5      	beq.n	400f68 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f7c:	68e3      	ldr	r3, [r4, #12]
  400f7e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f80:	6863      	ldr	r3, [r4, #4]
  400f82:	ea25 0503 	bic.w	r5, r5, r3
  400f86:	e7ef      	b.n	400f68 <pio_handler_process+0x20>
  400f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f8c:	00400f41 	.word	0x00400f41
  400f90:	00400f45 	.word	0x00400f45
  400f94:	20400670 	.word	0x20400670

00400f98 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f98:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f9a:	210a      	movs	r1, #10
  400f9c:	4801      	ldr	r0, [pc, #4]	; (400fa4 <PIOA_Handler+0xc>)
  400f9e:	4b02      	ldr	r3, [pc, #8]	; (400fa8 <PIOA_Handler+0x10>)
  400fa0:	4798      	blx	r3
  400fa2:	bd08      	pop	{r3, pc}
  400fa4:	400e0e00 	.word	0x400e0e00
  400fa8:	00400f49 	.word	0x00400f49

00400fac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400fac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400fae:	210b      	movs	r1, #11
  400fb0:	4801      	ldr	r0, [pc, #4]	; (400fb8 <PIOB_Handler+0xc>)
  400fb2:	4b02      	ldr	r3, [pc, #8]	; (400fbc <PIOB_Handler+0x10>)
  400fb4:	4798      	blx	r3
  400fb6:	bd08      	pop	{r3, pc}
  400fb8:	400e1000 	.word	0x400e1000
  400fbc:	00400f49 	.word	0x00400f49

00400fc0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fc0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400fc2:	210c      	movs	r1, #12
  400fc4:	4801      	ldr	r0, [pc, #4]	; (400fcc <PIOC_Handler+0xc>)
  400fc6:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <PIOC_Handler+0x10>)
  400fc8:	4798      	blx	r3
  400fca:	bd08      	pop	{r3, pc}
  400fcc:	400e1200 	.word	0x400e1200
  400fd0:	00400f49 	.word	0x00400f49

00400fd4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400fd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400fd6:	2110      	movs	r1, #16
  400fd8:	4801      	ldr	r0, [pc, #4]	; (400fe0 <PIOD_Handler+0xc>)
  400fda:	4b02      	ldr	r3, [pc, #8]	; (400fe4 <PIOD_Handler+0x10>)
  400fdc:	4798      	blx	r3
  400fde:	bd08      	pop	{r3, pc}
  400fe0:	400e1400 	.word	0x400e1400
  400fe4:	00400f49 	.word	0x00400f49

00400fe8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400fe8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400fea:	2111      	movs	r1, #17
  400fec:	4801      	ldr	r0, [pc, #4]	; (400ff4 <PIOE_Handler+0xc>)
  400fee:	4b02      	ldr	r3, [pc, #8]	; (400ff8 <PIOE_Handler+0x10>)
  400ff0:	4798      	blx	r3
  400ff2:	bd08      	pop	{r3, pc}
  400ff4:	400e1600 	.word	0x400e1600
  400ff8:	00400f49 	.word	0x00400f49

00400ffc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ffc:	2803      	cmp	r0, #3
  400ffe:	d011      	beq.n	401024 <pmc_mck_set_division+0x28>
  401000:	2804      	cmp	r0, #4
  401002:	d012      	beq.n	40102a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401004:	2802      	cmp	r0, #2
  401006:	bf0c      	ite	eq
  401008:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40100c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40100e:	4a08      	ldr	r2, [pc, #32]	; (401030 <pmc_mck_set_division+0x34>)
  401010:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401016:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401018:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40101a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40101c:	f013 0f08 	tst.w	r3, #8
  401020:	d0fb      	beq.n	40101a <pmc_mck_set_division+0x1e>
}
  401022:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401024:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401028:	e7f1      	b.n	40100e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40102a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40102e:	e7ee      	b.n	40100e <pmc_mck_set_division+0x12>
  401030:	400e0600 	.word	0x400e0600

00401034 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401034:	4a17      	ldr	r2, [pc, #92]	; (401094 <pmc_switch_mck_to_pllack+0x60>)
  401036:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40103c:	4318      	orrs	r0, r3
  40103e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401040:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401042:	f013 0f08 	tst.w	r3, #8
  401046:	d10a      	bne.n	40105e <pmc_switch_mck_to_pllack+0x2a>
  401048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40104c:	4911      	ldr	r1, [pc, #68]	; (401094 <pmc_switch_mck_to_pllack+0x60>)
  40104e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401050:	f012 0f08 	tst.w	r2, #8
  401054:	d103      	bne.n	40105e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401056:	3b01      	subs	r3, #1
  401058:	d1f9      	bne.n	40104e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40105a:	2001      	movs	r0, #1
  40105c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40105e:	4a0d      	ldr	r2, [pc, #52]	; (401094 <pmc_switch_mck_to_pllack+0x60>)
  401060:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401062:	f023 0303 	bic.w	r3, r3, #3
  401066:	f043 0302 	orr.w	r3, r3, #2
  40106a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40106c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40106e:	f013 0f08 	tst.w	r3, #8
  401072:	d10a      	bne.n	40108a <pmc_switch_mck_to_pllack+0x56>
  401074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401078:	4906      	ldr	r1, [pc, #24]	; (401094 <pmc_switch_mck_to_pllack+0x60>)
  40107a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40107c:	f012 0f08 	tst.w	r2, #8
  401080:	d105      	bne.n	40108e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401082:	3b01      	subs	r3, #1
  401084:	d1f9      	bne.n	40107a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401086:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401088:	4770      	bx	lr
	return 0;
  40108a:	2000      	movs	r0, #0
  40108c:	4770      	bx	lr
  40108e:	2000      	movs	r0, #0
  401090:	4770      	bx	lr
  401092:	bf00      	nop
  401094:	400e0600 	.word	0x400e0600

00401098 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401098:	b9a0      	cbnz	r0, 4010c4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40109a:	480e      	ldr	r0, [pc, #56]	; (4010d4 <pmc_switch_mainck_to_xtal+0x3c>)
  40109c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40109e:	0209      	lsls	r1, r1, #8
  4010a0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4010a2:	4a0d      	ldr	r2, [pc, #52]	; (4010d8 <pmc_switch_mainck_to_xtal+0x40>)
  4010a4:	401a      	ands	r2, r3
  4010a6:	4b0d      	ldr	r3, [pc, #52]	; (4010dc <pmc_switch_mainck_to_xtal+0x44>)
  4010a8:	4313      	orrs	r3, r2
  4010aa:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010ac:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4010ae:	4602      	mov	r2, r0
  4010b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010b2:	f013 0f01 	tst.w	r3, #1
  4010b6:	d0fb      	beq.n	4010b0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4010b8:	4a06      	ldr	r2, [pc, #24]	; (4010d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4010ba:	6a11      	ldr	r1, [r2, #32]
  4010bc:	4b08      	ldr	r3, [pc, #32]	; (4010e0 <pmc_switch_mainck_to_xtal+0x48>)
  4010be:	430b      	orrs	r3, r1
  4010c0:	6213      	str	r3, [r2, #32]
  4010c2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010c4:	4903      	ldr	r1, [pc, #12]	; (4010d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4010c6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4010c8:	4a06      	ldr	r2, [pc, #24]	; (4010e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4010ca:	401a      	ands	r2, r3
  4010cc:	4b06      	ldr	r3, [pc, #24]	; (4010e8 <pmc_switch_mainck_to_xtal+0x50>)
  4010ce:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010d0:	620b      	str	r3, [r1, #32]
  4010d2:	4770      	bx	lr
  4010d4:	400e0600 	.word	0x400e0600
  4010d8:	ffc8fffc 	.word	0xffc8fffc
  4010dc:	00370001 	.word	0x00370001
  4010e0:	01370000 	.word	0x01370000
  4010e4:	fec8fffc 	.word	0xfec8fffc
  4010e8:	01370002 	.word	0x01370002

004010ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4010ec:	4b02      	ldr	r3, [pc, #8]	; (4010f8 <pmc_osc_is_ready_mainck+0xc>)
  4010ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e0600 	.word	0x400e0600

004010fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4010fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401100:	4b01      	ldr	r3, [pc, #4]	; (401108 <pmc_disable_pllack+0xc>)
  401102:	629a      	str	r2, [r3, #40]	; 0x28
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	400e0600 	.word	0x400e0600

0040110c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40110c:	4b02      	ldr	r3, [pc, #8]	; (401118 <pmc_is_locked_pllack+0xc>)
  40110e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401110:	f000 0002 	and.w	r0, r0, #2
  401114:	4770      	bx	lr
  401116:	bf00      	nop
  401118:	400e0600 	.word	0x400e0600

0040111c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40111c:	283f      	cmp	r0, #63	; 0x3f
  40111e:	d81e      	bhi.n	40115e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401120:	281f      	cmp	r0, #31
  401122:	d80c      	bhi.n	40113e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401124:	4b11      	ldr	r3, [pc, #68]	; (40116c <pmc_enable_periph_clk+0x50>)
  401126:	699a      	ldr	r2, [r3, #24]
  401128:	2301      	movs	r3, #1
  40112a:	4083      	lsls	r3, r0
  40112c:	4393      	bics	r3, r2
  40112e:	d018      	beq.n	401162 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401130:	2301      	movs	r3, #1
  401132:	fa03 f000 	lsl.w	r0, r3, r0
  401136:	4b0d      	ldr	r3, [pc, #52]	; (40116c <pmc_enable_periph_clk+0x50>)
  401138:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40113a:	2000      	movs	r0, #0
  40113c:	4770      	bx	lr
		ul_id -= 32;
  40113e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401140:	4b0a      	ldr	r3, [pc, #40]	; (40116c <pmc_enable_periph_clk+0x50>)
  401142:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401146:	2301      	movs	r3, #1
  401148:	4083      	lsls	r3, r0
  40114a:	4393      	bics	r3, r2
  40114c:	d00b      	beq.n	401166 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40114e:	2301      	movs	r3, #1
  401150:	fa03 f000 	lsl.w	r0, r3, r0
  401154:	4b05      	ldr	r3, [pc, #20]	; (40116c <pmc_enable_periph_clk+0x50>)
  401156:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40115a:	2000      	movs	r0, #0
  40115c:	4770      	bx	lr
		return 1;
  40115e:	2001      	movs	r0, #1
  401160:	4770      	bx	lr
	return 0;
  401162:	2000      	movs	r0, #0
  401164:	4770      	bx	lr
  401166:	2000      	movs	r0, #0
}
  401168:	4770      	bx	lr
  40116a:	bf00      	nop
  40116c:	400e0600 	.word	0x400e0600

00401170 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401170:	4770      	bx	lr
	...

00401174 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  401174:	4a10      	ldr	r2, [pc, #64]	; (4011b8 <pmc_enable_waitmode+0x44>)
  401176:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401178:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401180:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  401182:	6a11      	ldr	r1, [r2, #32]
  401184:	4b0d      	ldr	r3, [pc, #52]	; (4011bc <pmc_enable_waitmode+0x48>)
  401186:	430b      	orrs	r3, r1
  401188:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40118a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40118c:	f013 0f08 	tst.w	r3, #8
  401190:	d0fb      	beq.n	40118a <pmc_enable_waitmode+0x16>
  401192:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  401196:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401198:	3b01      	subs	r3, #1
  40119a:	d1fc      	bne.n	401196 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40119c:	4a06      	ldr	r2, [pc, #24]	; (4011b8 <pmc_enable_waitmode+0x44>)
  40119e:	6a13      	ldr	r3, [r2, #32]
  4011a0:	f013 0f08 	tst.w	r3, #8
  4011a4:	d0fb      	beq.n	40119e <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4011a6:	4a04      	ldr	r2, [pc, #16]	; (4011b8 <pmc_enable_waitmode+0x44>)
  4011a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4011aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4011b2:	6713      	str	r3, [r2, #112]	; 0x70
  4011b4:	4770      	bx	lr
  4011b6:	bf00      	nop
  4011b8:	400e0600 	.word	0x400e0600
  4011bc:	00370004 	.word	0x00370004

004011c0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4011c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4011c4:	1e43      	subs	r3, r0, #1
  4011c6:	2b04      	cmp	r3, #4
  4011c8:	f200 8107 	bhi.w	4013da <pmc_sleep+0x21a>
  4011cc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4011d0:	00050005 	.word	0x00050005
  4011d4:	00150015 	.word	0x00150015
  4011d8:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4011da:	4a81      	ldr	r2, [pc, #516]	; (4013e0 <pmc_sleep+0x220>)
  4011dc:	6913      	ldr	r3, [r2, #16]
  4011de:	f023 0304 	bic.w	r3, r3, #4
  4011e2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4011e4:	2201      	movs	r2, #1
  4011e6:	4b7f      	ldr	r3, [pc, #508]	; (4013e4 <pmc_sleep+0x224>)
  4011e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4011ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4011ee:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4011f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4011f4:	bf30      	wfi
  4011f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4011fa:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4011fc:	2803      	cmp	r0, #3
  4011fe:	bf0c      	ite	eq
  401200:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  401202:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401206:	4b78      	ldr	r3, [pc, #480]	; (4013e8 <pmc_sleep+0x228>)
  401208:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40120a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40120c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401210:	2200      	movs	r2, #0
  401212:	4b74      	ldr	r3, [pc, #464]	; (4013e4 <pmc_sleep+0x224>)
  401214:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401216:	2201      	movs	r2, #1
  401218:	4b74      	ldr	r3, [pc, #464]	; (4013ec <pmc_sleep+0x22c>)
  40121a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40121c:	4b74      	ldr	r3, [pc, #464]	; (4013f0 <pmc_sleep+0x230>)
  40121e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401220:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  401222:	4a74      	ldr	r2, [pc, #464]	; (4013f4 <pmc_sleep+0x234>)
  401224:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401228:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40122a:	4a73      	ldr	r2, [pc, #460]	; (4013f8 <pmc_sleep+0x238>)
  40122c:	433a      	orrs	r2, r7
  40122e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401230:	f005 0903 	and.w	r9, r5, #3
  401234:	f1b9 0f01 	cmp.w	r9, #1
  401238:	f240 8089 	bls.w	40134e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40123c:	f025 0103 	bic.w	r1, r5, #3
  401240:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  401244:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401246:	461a      	mov	r2, r3
  401248:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40124a:	f013 0f08 	tst.w	r3, #8
  40124e:	d0fb      	beq.n	401248 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401250:	f011 0f70 	tst.w	r1, #112	; 0x70
  401254:	d008      	beq.n	401268 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401256:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40125a:	4b65      	ldr	r3, [pc, #404]	; (4013f0 <pmc_sleep+0x230>)
  40125c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40125e:	461a      	mov	r2, r3
  401260:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401262:	f013 0f08 	tst.w	r3, #8
  401266:	d0fb      	beq.n	401260 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401268:	4b64      	ldr	r3, [pc, #400]	; (4013fc <pmc_sleep+0x23c>)
  40126a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40126c:	4a60      	ldr	r2, [pc, #384]	; (4013f0 <pmc_sleep+0x230>)
  40126e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401274:	d0fb      	beq.n	40126e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401276:	4a5e      	ldr	r2, [pc, #376]	; (4013f0 <pmc_sleep+0x230>)
  401278:	6a11      	ldr	r1, [r2, #32]
  40127a:	4b61      	ldr	r3, [pc, #388]	; (401400 <pmc_sleep+0x240>)
  40127c:	400b      	ands	r3, r1
  40127e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401282:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401284:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401286:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40128a:	d0fb      	beq.n	401284 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40128c:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401290:	4a58      	ldr	r2, [pc, #352]	; (4013f4 <pmc_sleep+0x234>)
  401292:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401294:	2c04      	cmp	r4, #4
  401296:	d05c      	beq.n	401352 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401298:	4c52      	ldr	r4, [pc, #328]	; (4013e4 <pmc_sleep+0x224>)
  40129a:	2301      	movs	r3, #1
  40129c:	7023      	strb	r3, [r4, #0]
  40129e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012a2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4012a4:	4b57      	ldr	r3, [pc, #348]	; (401404 <pmc_sleep+0x244>)
  4012a6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4012a8:	b672      	cpsid	i
  4012aa:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4012ae:	2300      	movs	r3, #0
  4012b0:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4012b2:	f017 0f02 	tst.w	r7, #2
  4012b6:	d055      	beq.n	401364 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012b8:	4a4d      	ldr	r2, [pc, #308]	; (4013f0 <pmc_sleep+0x230>)
  4012ba:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4012bc:	4952      	ldr	r1, [pc, #328]	; (401408 <pmc_sleep+0x248>)
  4012be:	4019      	ands	r1, r3
  4012c0:	4b52      	ldr	r3, [pc, #328]	; (40140c <pmc_sleep+0x24c>)
  4012c2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012c4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4012c6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4012c8:	4b51      	ldr	r3, [pc, #324]	; (401410 <pmc_sleep+0x250>)
  4012ca:	400b      	ands	r3, r1
  4012cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4012d0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4012d2:	4b50      	ldr	r3, [pc, #320]	; (401414 <pmc_sleep+0x254>)
  4012d4:	4033      	ands	r3, r6
  4012d6:	2b00      	cmp	r3, #0
  4012d8:	d06e      	beq.n	4013b8 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4012da:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4012de:	4b44      	ldr	r3, [pc, #272]	; (4013f0 <pmc_sleep+0x230>)
  4012e0:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4012e2:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4012e4:	f1b9 0f02 	cmp.w	r9, #2
  4012e8:	d104      	bne.n	4012f4 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4012ea:	4a41      	ldr	r2, [pc, #260]	; (4013f0 <pmc_sleep+0x230>)
  4012ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ee:	f013 0f02 	tst.w	r3, #2
  4012f2:	d0fb      	beq.n	4012ec <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4012f4:	4a3e      	ldr	r2, [pc, #248]	; (4013f0 <pmc_sleep+0x230>)
  4012f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4012f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4012fc:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401300:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401302:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401304:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401306:	f013 0f08 	tst.w	r3, #8
  40130a:	d0fb      	beq.n	401304 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40130c:	4b39      	ldr	r3, [pc, #228]	; (4013f4 <pmc_sleep+0x234>)
  40130e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  401312:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401316:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401318:	461a      	mov	r2, r3
  40131a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40131c:	f013 0f08 	tst.w	r3, #8
  401320:	d0fb      	beq.n	40131a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  401322:	4a33      	ldr	r2, [pc, #204]	; (4013f0 <pmc_sleep+0x230>)
  401324:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401326:	420b      	tst	r3, r1
  401328:	d0fc      	beq.n	401324 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40132a:	2200      	movs	r2, #0
  40132c:	4b2f      	ldr	r3, [pc, #188]	; (4013ec <pmc_sleep+0x22c>)
  40132e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401330:	4b39      	ldr	r3, [pc, #228]	; (401418 <pmc_sleep+0x258>)
  401332:	681b      	ldr	r3, [r3, #0]
  401334:	b11b      	cbz	r3, 40133e <pmc_sleep+0x17e>
			callback_clocks_restored();
  401336:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401338:	2200      	movs	r2, #0
  40133a:	4b37      	ldr	r3, [pc, #220]	; (401418 <pmc_sleep+0x258>)
  40133c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40133e:	2201      	movs	r2, #1
  401340:	4b28      	ldr	r3, [pc, #160]	; (4013e4 <pmc_sleep+0x224>)
  401342:	701a      	strb	r2, [r3, #0]
  401344:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401348:	b662      	cpsie	i
  40134a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40134e:	4629      	mov	r1, r5
  401350:	e77e      	b.n	401250 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401352:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401356:	6a11      	ldr	r1, [r2, #32]
  401358:	4b30      	ldr	r3, [pc, #192]	; (40141c <pmc_sleep+0x25c>)
  40135a:	400b      	ands	r3, r1
  40135c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401360:	6213      	str	r3, [r2, #32]
  401362:	e799      	b.n	401298 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401364:	f017 0f01 	tst.w	r7, #1
  401368:	d0b3      	beq.n	4012d2 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40136a:	4b21      	ldr	r3, [pc, #132]	; (4013f0 <pmc_sleep+0x230>)
  40136c:	6a1b      	ldr	r3, [r3, #32]
  40136e:	f013 0f01 	tst.w	r3, #1
  401372:	d10b      	bne.n	40138c <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401374:	491e      	ldr	r1, [pc, #120]	; (4013f0 <pmc_sleep+0x230>)
  401376:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401378:	4a29      	ldr	r2, [pc, #164]	; (401420 <pmc_sleep+0x260>)
  40137a:	401a      	ands	r2, r3
  40137c:	4b29      	ldr	r3, [pc, #164]	; (401424 <pmc_sleep+0x264>)
  40137e:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401380:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401382:	460a      	mov	r2, r1
  401384:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401386:	f013 0f01 	tst.w	r3, #1
  40138a:	d0fb      	beq.n	401384 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40138c:	4b18      	ldr	r3, [pc, #96]	; (4013f0 <pmc_sleep+0x230>)
  40138e:	6a1b      	ldr	r3, [r3, #32]
  401390:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401394:	d108      	bne.n	4013a8 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401396:	4a16      	ldr	r2, [pc, #88]	; (4013f0 <pmc_sleep+0x230>)
  401398:	6a11      	ldr	r1, [r2, #32]
  40139a:	4b23      	ldr	r3, [pc, #140]	; (401428 <pmc_sleep+0x268>)
  40139c:	430b      	orrs	r3, r1
  40139e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4013a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013a6:	d0fb      	beq.n	4013a0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013a8:	4a11      	ldr	r2, [pc, #68]	; (4013f0 <pmc_sleep+0x230>)
  4013aa:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4013ac:	4b18      	ldr	r3, [pc, #96]	; (401410 <pmc_sleep+0x250>)
  4013ae:	400b      	ands	r3, r1
  4013b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013b4:	6213      	str	r3, [r2, #32]
  4013b6:	e78c      	b.n	4012d2 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4013b8:	2100      	movs	r1, #0
  4013ba:	e793      	b.n	4012e4 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4013bc:	4a08      	ldr	r2, [pc, #32]	; (4013e0 <pmc_sleep+0x220>)
  4013be:	6913      	ldr	r3, [r2, #16]
  4013c0:	f043 0304 	orr.w	r3, r3, #4
  4013c4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4013c6:	4a19      	ldr	r2, [pc, #100]	; (40142c <pmc_sleep+0x26c>)
  4013c8:	4b19      	ldr	r3, [pc, #100]	; (401430 <pmc_sleep+0x270>)
  4013ca:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4013cc:	2201      	movs	r2, #1
  4013ce:	4b05      	ldr	r3, [pc, #20]	; (4013e4 <pmc_sleep+0x224>)
  4013d0:	701a      	strb	r2, [r3, #0]
  4013d2:	f3bf 8f5f 	dmb	sy
  4013d6:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4013d8:	bf30      	wfi
  4013da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013de:	bf00      	nop
  4013e0:	e000ed00 	.word	0xe000ed00
  4013e4:	20400018 	.word	0x20400018
  4013e8:	00401171 	.word	0x00401171
  4013ec:	204006e0 	.word	0x204006e0
  4013f0:	400e0600 	.word	0x400e0600
  4013f4:	400e0c00 	.word	0x400e0c00
  4013f8:	00370008 	.word	0x00370008
  4013fc:	004010fd 	.word	0x004010fd
  401400:	fec8ffff 	.word	0xfec8ffff
  401404:	00401175 	.word	0x00401175
  401408:	fec8fffc 	.word	0xfec8fffc
  40140c:	01370002 	.word	0x01370002
  401410:	ffc8ff87 	.word	0xffc8ff87
  401414:	07ff0000 	.word	0x07ff0000
  401418:	204006e4 	.word	0x204006e4
  40141c:	ffc8fffe 	.word	0xffc8fffe
  401420:	ffc8fffc 	.word	0xffc8fffc
  401424:	00370001 	.word	0x00370001
  401428:	01370000 	.word	0x01370000
  40142c:	a5000004 	.word	0xa5000004
  401430:	400e1810 	.word	0x400e1810

00401434 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401434:	e7fe      	b.n	401434 <Dummy_Handler>
	...

00401438 <Reset_Handler>:
{
  401438:	b500      	push	{lr}
  40143a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40143c:	4b25      	ldr	r3, [pc, #148]	; (4014d4 <Reset_Handler+0x9c>)
  40143e:	4a26      	ldr	r2, [pc, #152]	; (4014d8 <Reset_Handler+0xa0>)
  401440:	429a      	cmp	r2, r3
  401442:	d010      	beq.n	401466 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401444:	4b25      	ldr	r3, [pc, #148]	; (4014dc <Reset_Handler+0xa4>)
  401446:	4a23      	ldr	r2, [pc, #140]	; (4014d4 <Reset_Handler+0x9c>)
  401448:	429a      	cmp	r2, r3
  40144a:	d20c      	bcs.n	401466 <Reset_Handler+0x2e>
  40144c:	3b01      	subs	r3, #1
  40144e:	1a9b      	subs	r3, r3, r2
  401450:	f023 0303 	bic.w	r3, r3, #3
  401454:	3304      	adds	r3, #4
  401456:	4413      	add	r3, r2
  401458:	491f      	ldr	r1, [pc, #124]	; (4014d8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40145a:	f851 0b04 	ldr.w	r0, [r1], #4
  40145e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401462:	429a      	cmp	r2, r3
  401464:	d1f9      	bne.n	40145a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401466:	4b1e      	ldr	r3, [pc, #120]	; (4014e0 <Reset_Handler+0xa8>)
  401468:	4a1e      	ldr	r2, [pc, #120]	; (4014e4 <Reset_Handler+0xac>)
  40146a:	429a      	cmp	r2, r3
  40146c:	d20a      	bcs.n	401484 <Reset_Handler+0x4c>
  40146e:	3b01      	subs	r3, #1
  401470:	1a9b      	subs	r3, r3, r2
  401472:	f023 0303 	bic.w	r3, r3, #3
  401476:	3304      	adds	r3, #4
  401478:	4413      	add	r3, r2
                *pDest++ = 0;
  40147a:	2100      	movs	r1, #0
  40147c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401480:	4293      	cmp	r3, r2
  401482:	d1fb      	bne.n	40147c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401484:	4a18      	ldr	r2, [pc, #96]	; (4014e8 <Reset_Handler+0xb0>)
  401486:	4b19      	ldr	r3, [pc, #100]	; (4014ec <Reset_Handler+0xb4>)
  401488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40148c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40148e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401492:	fab3 f383 	clz	r3, r3
  401496:	095b      	lsrs	r3, r3, #5
  401498:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40149a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40149c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4014a0:	2200      	movs	r2, #0
  4014a2:	4b13      	ldr	r3, [pc, #76]	; (4014f0 <Reset_Handler+0xb8>)
  4014a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4014a6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4014a8:	4a12      	ldr	r2, [pc, #72]	; (4014f4 <Reset_Handler+0xbc>)
  4014aa:	6813      	ldr	r3, [r2, #0]
  4014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4014b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014b6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4014ba:	b129      	cbz	r1, 4014c8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4014bc:	2201      	movs	r2, #1
  4014be:	4b0c      	ldr	r3, [pc, #48]	; (4014f0 <Reset_Handler+0xb8>)
  4014c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4014c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014c6:	b662      	cpsie	i
        __libc_init_array();
  4014c8:	4b0b      	ldr	r3, [pc, #44]	; (4014f8 <Reset_Handler+0xc0>)
  4014ca:	4798      	blx	r3
        main();
  4014cc:	4b0b      	ldr	r3, [pc, #44]	; (4014fc <Reset_Handler+0xc4>)
  4014ce:	4798      	blx	r3
  4014d0:	e7fe      	b.n	4014d0 <Reset_Handler+0x98>
  4014d2:	bf00      	nop
  4014d4:	20400000 	.word	0x20400000
  4014d8:	0040255c 	.word	0x0040255c
  4014dc:	2040044c 	.word	0x2040044c
  4014e0:	2040070c 	.word	0x2040070c
  4014e4:	2040044c 	.word	0x2040044c
  4014e8:	e000ed00 	.word	0xe000ed00
  4014ec:	00400000 	.word	0x00400000
  4014f0:	20400018 	.word	0x20400018
  4014f4:	e000ed88 	.word	0xe000ed88
  4014f8:	00401975 	.word	0x00401975
  4014fc:	004018d5 	.word	0x004018d5

00401500 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401500:	4b3b      	ldr	r3, [pc, #236]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401504:	f003 0303 	and.w	r3, r3, #3
  401508:	2b01      	cmp	r3, #1
  40150a:	d01d      	beq.n	401548 <SystemCoreClockUpdate+0x48>
  40150c:	b183      	cbz	r3, 401530 <SystemCoreClockUpdate+0x30>
  40150e:	2b02      	cmp	r3, #2
  401510:	d036      	beq.n	401580 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401512:	4b37      	ldr	r3, [pc, #220]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401516:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40151a:	2b70      	cmp	r3, #112	; 0x70
  40151c:	d05f      	beq.n	4015de <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40151e:	4b34      	ldr	r3, [pc, #208]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401522:	4934      	ldr	r1, [pc, #208]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  401524:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401528:	680b      	ldr	r3, [r1, #0]
  40152a:	40d3      	lsrs	r3, r2
  40152c:	600b      	str	r3, [r1, #0]
  40152e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401530:	4b31      	ldr	r3, [pc, #196]	; (4015f8 <SystemCoreClockUpdate+0xf8>)
  401532:	695b      	ldr	r3, [r3, #20]
  401534:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401538:	bf14      	ite	ne
  40153a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40153e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401542:	4b2c      	ldr	r3, [pc, #176]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  401544:	601a      	str	r2, [r3, #0]
  401546:	e7e4      	b.n	401512 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401548:	4b29      	ldr	r3, [pc, #164]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  40154a:	6a1b      	ldr	r3, [r3, #32]
  40154c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401550:	d003      	beq.n	40155a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401552:	4a2a      	ldr	r2, [pc, #168]	; (4015fc <SystemCoreClockUpdate+0xfc>)
  401554:	4b27      	ldr	r3, [pc, #156]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  401556:	601a      	str	r2, [r3, #0]
  401558:	e7db      	b.n	401512 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40155a:	4a29      	ldr	r2, [pc, #164]	; (401600 <SystemCoreClockUpdate+0x100>)
  40155c:	4b25      	ldr	r3, [pc, #148]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  40155e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401560:	4b23      	ldr	r3, [pc, #140]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401562:	6a1b      	ldr	r3, [r3, #32]
  401564:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401568:	2b10      	cmp	r3, #16
  40156a:	d005      	beq.n	401578 <SystemCoreClockUpdate+0x78>
  40156c:	2b20      	cmp	r3, #32
  40156e:	d1d0      	bne.n	401512 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401570:	4a22      	ldr	r2, [pc, #136]	; (4015fc <SystemCoreClockUpdate+0xfc>)
  401572:	4b20      	ldr	r3, [pc, #128]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  401574:	601a      	str	r2, [r3, #0]
          break;
  401576:	e7cc      	b.n	401512 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401578:	4a22      	ldr	r2, [pc, #136]	; (401604 <SystemCoreClockUpdate+0x104>)
  40157a:	4b1e      	ldr	r3, [pc, #120]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  40157c:	601a      	str	r2, [r3, #0]
          break;
  40157e:	e7c8      	b.n	401512 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401580:	4b1b      	ldr	r3, [pc, #108]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401582:	6a1b      	ldr	r3, [r3, #32]
  401584:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401588:	d016      	beq.n	4015b8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40158a:	4a1c      	ldr	r2, [pc, #112]	; (4015fc <SystemCoreClockUpdate+0xfc>)
  40158c:	4b19      	ldr	r3, [pc, #100]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  40158e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401590:	4b17      	ldr	r3, [pc, #92]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  401592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401594:	f003 0303 	and.w	r3, r3, #3
  401598:	2b02      	cmp	r3, #2
  40159a:	d1ba      	bne.n	401512 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40159c:	4a14      	ldr	r2, [pc, #80]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  40159e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4015a2:	4814      	ldr	r0, [pc, #80]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015a4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4015a8:	6803      	ldr	r3, [r0, #0]
  4015aa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015ae:	b2d2      	uxtb	r2, r2
  4015b0:	fbb3 f3f2 	udiv	r3, r3, r2
  4015b4:	6003      	str	r3, [r0, #0]
  4015b6:	e7ac      	b.n	401512 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015b8:	4a11      	ldr	r2, [pc, #68]	; (401600 <SystemCoreClockUpdate+0x100>)
  4015ba:	4b0e      	ldr	r3, [pc, #56]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  4015bc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015be:	4b0c      	ldr	r3, [pc, #48]	; (4015f0 <SystemCoreClockUpdate+0xf0>)
  4015c0:	6a1b      	ldr	r3, [r3, #32]
  4015c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015c6:	2b10      	cmp	r3, #16
  4015c8:	d005      	beq.n	4015d6 <SystemCoreClockUpdate+0xd6>
  4015ca:	2b20      	cmp	r3, #32
  4015cc:	d1e0      	bne.n	401590 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4015ce:	4a0b      	ldr	r2, [pc, #44]	; (4015fc <SystemCoreClockUpdate+0xfc>)
  4015d0:	4b08      	ldr	r3, [pc, #32]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  4015d2:	601a      	str	r2, [r3, #0]
          break;
  4015d4:	e7dc      	b.n	401590 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4015d6:	4a0b      	ldr	r2, [pc, #44]	; (401604 <SystemCoreClockUpdate+0x104>)
  4015d8:	4b06      	ldr	r3, [pc, #24]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  4015da:	601a      	str	r2, [r3, #0]
          break;
  4015dc:	e7d8      	b.n	401590 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4015de:	4a05      	ldr	r2, [pc, #20]	; (4015f4 <SystemCoreClockUpdate+0xf4>)
  4015e0:	6813      	ldr	r3, [r2, #0]
  4015e2:	4909      	ldr	r1, [pc, #36]	; (401608 <SystemCoreClockUpdate+0x108>)
  4015e4:	fba1 1303 	umull	r1, r3, r1, r3
  4015e8:	085b      	lsrs	r3, r3, #1
  4015ea:	6013      	str	r3, [r2, #0]
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop
  4015f0:	400e0600 	.word	0x400e0600
  4015f4:	2040001c 	.word	0x2040001c
  4015f8:	400e1810 	.word	0x400e1810
  4015fc:	00b71b00 	.word	0x00b71b00
  401600:	003d0900 	.word	0x003d0900
  401604:	007a1200 	.word	0x007a1200
  401608:	aaaaaaab 	.word	0xaaaaaaab

0040160c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40160c:	4b16      	ldr	r3, [pc, #88]	; (401668 <system_init_flash+0x5c>)
  40160e:	4298      	cmp	r0, r3
  401610:	d913      	bls.n	40163a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401612:	4b16      	ldr	r3, [pc, #88]	; (40166c <system_init_flash+0x60>)
  401614:	4298      	cmp	r0, r3
  401616:	d915      	bls.n	401644 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401618:	4b15      	ldr	r3, [pc, #84]	; (401670 <system_init_flash+0x64>)
  40161a:	4298      	cmp	r0, r3
  40161c:	d916      	bls.n	40164c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40161e:	4b15      	ldr	r3, [pc, #84]	; (401674 <system_init_flash+0x68>)
  401620:	4298      	cmp	r0, r3
  401622:	d917      	bls.n	401654 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401624:	4b14      	ldr	r3, [pc, #80]	; (401678 <system_init_flash+0x6c>)
  401626:	4298      	cmp	r0, r3
  401628:	d918      	bls.n	40165c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40162a:	4b14      	ldr	r3, [pc, #80]	; (40167c <system_init_flash+0x70>)
  40162c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40162e:	bf94      	ite	ls
  401630:	4a13      	ldrls	r2, [pc, #76]	; (401680 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401632:	4a14      	ldrhi	r2, [pc, #80]	; (401684 <system_init_flash+0x78>)
  401634:	4b14      	ldr	r3, [pc, #80]	; (401688 <system_init_flash+0x7c>)
  401636:	601a      	str	r2, [r3, #0]
  401638:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40163a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40163e:	4b12      	ldr	r3, [pc, #72]	; (401688 <system_init_flash+0x7c>)
  401640:	601a      	str	r2, [r3, #0]
  401642:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401644:	4a11      	ldr	r2, [pc, #68]	; (40168c <system_init_flash+0x80>)
  401646:	4b10      	ldr	r3, [pc, #64]	; (401688 <system_init_flash+0x7c>)
  401648:	601a      	str	r2, [r3, #0]
  40164a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40164c:	4a10      	ldr	r2, [pc, #64]	; (401690 <system_init_flash+0x84>)
  40164e:	4b0e      	ldr	r3, [pc, #56]	; (401688 <system_init_flash+0x7c>)
  401650:	601a      	str	r2, [r3, #0]
  401652:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401654:	4a0f      	ldr	r2, [pc, #60]	; (401694 <system_init_flash+0x88>)
  401656:	4b0c      	ldr	r3, [pc, #48]	; (401688 <system_init_flash+0x7c>)
  401658:	601a      	str	r2, [r3, #0]
  40165a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40165c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401660:	4b09      	ldr	r3, [pc, #36]	; (401688 <system_init_flash+0x7c>)
  401662:	601a      	str	r2, [r3, #0]
  401664:	4770      	bx	lr
  401666:	bf00      	nop
  401668:	015ef3bf 	.word	0x015ef3bf
  40166c:	02bde77f 	.word	0x02bde77f
  401670:	041cdb3f 	.word	0x041cdb3f
  401674:	057bceff 	.word	0x057bceff
  401678:	06dac2bf 	.word	0x06dac2bf
  40167c:	0839b67f 	.word	0x0839b67f
  401680:	04000500 	.word	0x04000500
  401684:	04000600 	.word	0x04000600
  401688:	400e0c00 	.word	0x400e0c00
  40168c:	04000100 	.word	0x04000100
  401690:	04000200 	.word	0x04000200
  401694:	04000300 	.word	0x04000300

00401698 <RTT_init>:

static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  401698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40169c:	ed2d 8b02 	vpush	{d8}
  4016a0:	b082      	sub	sp, #8
  4016a2:	eeb0 8a40 	vmov.f32	s16, s0
  4016a6:	4680      	mov	r8, r0
  4016a8:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  4016aa:	4c20      	ldr	r4, [pc, #128]	; (40172c <RTT_init+0x94>)
  4016ac:	2100      	movs	r1, #0
  4016ae:	4620      	mov	r0, r4
  4016b0:	4b1f      	ldr	r3, [pc, #124]	; (401730 <RTT_init+0x98>)
  4016b2:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  4016b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401734 <RTT_init+0x9c>
  4016b8:	eec7 7a08 	vdiv.f32	s15, s14, s16
  4016bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4016c0:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  4016c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  4016c8:	4620      	mov	r0, r4
  4016ca:	4b1b      	ldr	r3, [pc, #108]	; (401738 <RTT_init+0xa0>)
  4016cc:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4016ce:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4016d2:	d116      	bne.n	401702 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4016d4:	4b19      	ldr	r3, [pc, #100]	; (40173c <RTT_init+0xa4>)
  4016d6:	2208      	movs	r2, #8
  4016d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4016dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016e0:	2180      	movs	r1, #128	; 0x80
  4016e2:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016e6:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4016e8:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4016ec:	d119      	bne.n	401722 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4016ee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4016f2:	480e      	ldr	r0, [pc, #56]	; (40172c <RTT_init+0x94>)
  4016f4:	4b12      	ldr	r3, [pc, #72]	; (401740 <RTT_init+0xa8>)
  4016f6:	4798      	blx	r3
	
}	
  4016f8:	b002      	add	sp, #8
  4016fa:	ecbd 8b02 	vpop	{d8}
  4016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  401702:	4620      	mov	r0, r4
  401704:	4b0f      	ldr	r3, [pc, #60]	; (401744 <RTT_init+0xac>)
  401706:	4798      	blx	r3
  401708:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  40170a:	4e08      	ldr	r6, [pc, #32]	; (40172c <RTT_init+0x94>)
  40170c:	4d0d      	ldr	r5, [pc, #52]	; (401744 <RTT_init+0xac>)
  40170e:	4630      	mov	r0, r6
  401710:	47a8      	blx	r5
  401712:	4284      	cmp	r4, r0
  401714:	d0fb      	beq.n	40170e <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401716:	eb04 0108 	add.w	r1, r4, r8
  40171a:	4804      	ldr	r0, [pc, #16]	; (40172c <RTT_init+0x94>)
  40171c:	4b0a      	ldr	r3, [pc, #40]	; (401748 <RTT_init+0xb0>)
  40171e:	4798      	blx	r3
  401720:	e7d8      	b.n	4016d4 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  401722:	4639      	mov	r1, r7
  401724:	4801      	ldr	r0, [pc, #4]	; (40172c <RTT_init+0x94>)
  401726:	4b09      	ldr	r3, [pc, #36]	; (40174c <RTT_init+0xb4>)
  401728:	4798      	blx	r3
  40172a:	e7e5      	b.n	4016f8 <RTT_init+0x60>
  40172c:	400e1830 	.word	0x400e1830
  401730:	004001c1 	.word	0x004001c1
  401734:	47000000 	.word	0x47000000
  401738:	004001ad 	.word	0x004001ad
  40173c:	e000e100 	.word	0xe000e100
  401740:	00400201 	.word	0x00400201
  401744:	00400215 	.word	0x00400215
  401748:	0040022d 	.word	0x0040022d
  40174c:	004001ed 	.word	0x004001ed

00401750 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  401750:	b538      	push	{r3, r4, r5, lr}
  401752:	4604      	mov	r4, r0
  401754:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  401756:	4b06      	ldr	r3, [pc, #24]	; (401770 <pin_toggle+0x20>)
  401758:	4798      	blx	r3
  40175a:	b920      	cbnz	r0, 401766 <pin_toggle+0x16>
	pio_set(pio,mask);
  40175c:	4629      	mov	r1, r5
  40175e:	4620      	mov	r0, r4
  401760:	4b04      	ldr	r3, [pc, #16]	; (401774 <pin_toggle+0x24>)
  401762:	4798      	blx	r3
  401764:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  401766:	4629      	mov	r1, r5
  401768:	4620      	mov	r0, r4
  40176a:	4b03      	ldr	r3, [pc, #12]	; (401778 <pin_toggle+0x28>)
  40176c:	4798      	blx	r3
  40176e:	bd38      	pop	{r3, r4, r5, pc}
  401770:	00400f35 	.word	0x00400f35
  401774:	00400dad 	.word	0x00400dad
  401778:	00400db1 	.word	0x00400db1

0040177c <LED_init>:
void LED_init(int estado) {
  40177c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40177e:	b083      	sub	sp, #12
  401780:	4606      	mov	r6, r0
	pmc_enable_periph_clk(LED1_OLED_PIO_ID);
  401782:	200a      	movs	r0, #10
  401784:	4f0a      	ldr	r7, [pc, #40]	; (4017b0 <LED_init+0x34>)
  401786:	47b8      	blx	r7
	pio_set_output(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK, estado, 0, 0);
  401788:	2400      	movs	r4, #0
  40178a:	9400      	str	r4, [sp, #0]
  40178c:	4623      	mov	r3, r4
  40178e:	4632      	mov	r2, r6
  401790:	2101      	movs	r1, #1
  401792:	4808      	ldr	r0, [pc, #32]	; (4017b4 <LED_init+0x38>)
  401794:	4d08      	ldr	r5, [pc, #32]	; (4017b8 <LED_init+0x3c>)
  401796:	47a8      	blx	r5
	pmc_enable_periph_clk(LED2_OLED_PIO_ID);
  401798:	200c      	movs	r0, #12
  40179a:	47b8      	blx	r7
	pio_set_output(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK, estado, 0, 0);
  40179c:	9400      	str	r4, [sp, #0]
  40179e:	4623      	mov	r3, r4
  4017a0:	4632      	mov	r2, r6
  4017a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4017a6:	4805      	ldr	r0, [pc, #20]	; (4017bc <LED_init+0x40>)
  4017a8:	47a8      	blx	r5
};
  4017aa:	b003      	add	sp, #12
  4017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017ae:	bf00      	nop
  4017b0:	0040111d 	.word	0x0040111d
  4017b4:	400e0e00 	.word	0x400e0e00
  4017b8:	00400e7d 	.word	0x00400e7d
  4017bc:	400e1200 	.word	0x400e1200

004017c0 <TC1_Handler>:
void TC1_Handler(void) {
  4017c0:	b500      	push	{lr}
  4017c2:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  4017c4:	2101      	movs	r1, #1
  4017c6:	4805      	ldr	r0, [pc, #20]	; (4017dc <TC1_Handler+0x1c>)
  4017c8:	4b05      	ldr	r3, [pc, #20]	; (4017e0 <TC1_Handler+0x20>)
  4017ca:	4798      	blx	r3
  4017cc:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);  
  4017ce:	2101      	movs	r1, #1
  4017d0:	4804      	ldr	r0, [pc, #16]	; (4017e4 <TC1_Handler+0x24>)
  4017d2:	4b05      	ldr	r3, [pc, #20]	; (4017e8 <TC1_Handler+0x28>)
  4017d4:	4798      	blx	r3
}
  4017d6:	b003      	add	sp, #12
  4017d8:	f85d fb04 	ldr.w	pc, [sp], #4
  4017dc:	4000c000 	.word	0x4000c000
  4017e0:	004003ed 	.word	0x004003ed
  4017e4:	400e0e00 	.word	0x400e0e00
  4017e8:	00401751 	.word	0x00401751

004017ec <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4017ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4017f0:	b085      	sub	sp, #20
  4017f2:	4606      	mov	r6, r0
  4017f4:	460c      	mov	r4, r1
  4017f6:	4617      	mov	r7, r2
  4017f8:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  4017fa:	4608      	mov	r0, r1
  4017fc:	4b1c      	ldr	r3, [pc, #112]	; (401870 <TC_init+0x84>)
  4017fe:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401800:	4d1c      	ldr	r5, [pc, #112]	; (401874 <TC_init+0x88>)
  401802:	9500      	str	r5, [sp, #0]
  401804:	ab02      	add	r3, sp, #8
  401806:	aa03      	add	r2, sp, #12
  401808:	4629      	mov	r1, r5
  40180a:	4640      	mov	r0, r8
  40180c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401890 <TC_init+0xa4>
  401810:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401812:	9a02      	ldr	r2, [sp, #8]
  401814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401818:	4639      	mov	r1, r7
  40181a:	4630      	mov	r0, r6
  40181c:	4b16      	ldr	r3, [pc, #88]	; (401878 <TC_init+0x8c>)
  40181e:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401820:	9a03      	ldr	r2, [sp, #12]
  401822:	fbb5 f2f2 	udiv	r2, r5, r2
  401826:	fbb2 f2f8 	udiv	r2, r2, r8
  40182a:	4639      	mov	r1, r7
  40182c:	4630      	mov	r0, r6
  40182e:	4b13      	ldr	r3, [pc, #76]	; (40187c <TC_init+0x90>)
  401830:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  401832:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401834:	2b00      	cmp	r3, #0
  401836:	db13      	blt.n	401860 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401838:	4a11      	ldr	r2, [pc, #68]	; (401880 <TC_init+0x94>)
  40183a:	2180      	movs	r1, #128	; 0x80
  40183c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40183e:	095b      	lsrs	r3, r3, #5
  401840:	f004 041f 	and.w	r4, r4, #31
  401844:	2201      	movs	r2, #1
  401846:	fa02 f404 	lsl.w	r4, r2, r4
  40184a:	4a0e      	ldr	r2, [pc, #56]	; (401884 <TC_init+0x98>)
  40184c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401850:	2210      	movs	r2, #16
  401852:	4639      	mov	r1, r7
  401854:	4630      	mov	r0, r6
  401856:	4b0c      	ldr	r3, [pc, #48]	; (401888 <TC_init+0x9c>)
  401858:	4798      	blx	r3
}
  40185a:	b005      	add	sp, #20
  40185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401860:	f004 010f 	and.w	r1, r4, #15
  401864:	4a09      	ldr	r2, [pc, #36]	; (40188c <TC_init+0xa0>)
  401866:	440a      	add	r2, r1
  401868:	2180      	movs	r1, #128	; 0x80
  40186a:	7611      	strb	r1, [r2, #24]
  40186c:	e7e7      	b.n	40183e <TC_init+0x52>
  40186e:	bf00      	nop
  401870:	0040111d 	.word	0x0040111d
  401874:	11e1a300 	.word	0x11e1a300
  401878:	004003bb 	.word	0x004003bb
  40187c:	004003dd 	.word	0x004003dd
  401880:	e000e400 	.word	0xe000e400
  401884:	e000e100 	.word	0xe000e100
  401888:	004003e5 	.word	0x004003e5
  40188c:	e000ecfc 	.word	0xe000ecfc
  401890:	004003f5 	.word	0x004003f5

00401894 <RTT_Handler>:
void RTT_Handler(void) {
  401894:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  401896:	480a      	ldr	r0, [pc, #40]	; (4018c0 <RTT_Handler+0x2c>)
  401898:	4b0a      	ldr	r3, [pc, #40]	; (4018c4 <RTT_Handler+0x30>)
  40189a:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  40189c:	f010 0f01 	tst.w	r0, #1
  4018a0:	d100      	bne.n	4018a4 <RTT_Handler+0x10>
  4018a2:	bd08      	pop	{r3, pc}
		pin_toggle(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  4018a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4018a8:	4807      	ldr	r0, [pc, #28]	; (4018c8 <RTT_Handler+0x34>)
  4018aa:	4b08      	ldr	r3, [pc, #32]	; (4018cc <RTT_Handler+0x38>)
  4018ac:	4798      	blx	r3
		RTT_init(1, 4, RTT_MR_RTTINCIEN);
  4018ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4018b2:	2004      	movs	r0, #4
  4018b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  4018b8:	4b05      	ldr	r3, [pc, #20]	; (4018d0 <RTT_Handler+0x3c>)
  4018ba:	4798      	blx	r3
}
  4018bc:	e7f1      	b.n	4018a2 <RTT_Handler+0xe>
  4018be:	bf00      	nop
  4018c0:	400e1830 	.word	0x400e1830
  4018c4:	00400229 	.word	0x00400229
  4018c8:	400e1200 	.word	0x400e1200
  4018cc:	00401751 	.word	0x00401751
  4018d0:	00401699 	.word	0x00401699

004018d4 <main>:

int main (void)
{
  4018d4:	b500      	push	{lr}
  4018d6:	b083      	sub	sp, #12
	board_init();
  4018d8:	4b18      	ldr	r3, [pc, #96]	; (40193c <main+0x68>)
  4018da:	4798      	blx	r3
	sysclk_init();
  4018dc:	4b18      	ldr	r3, [pc, #96]	; (401940 <main+0x6c>)
  4018de:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018e4:	4b17      	ldr	r3, [pc, #92]	; (401944 <main+0x70>)
  4018e6:	605a      	str	r2, [r3, #4]
	delay_init();

  // Init OLED
	gfx_mono_ssd1306_init();
  4018e8:	4b17      	ldr	r3, [pc, #92]	; (401948 <main+0x74>)
  4018ea:	4798      	blx	r3
	gfx_mono_draw_filled_circle(20, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
  4018ec:	23ff      	movs	r3, #255	; 0xff
  4018ee:	9300      	str	r3, [sp, #0]
  4018f0:	2301      	movs	r3, #1
  4018f2:	2210      	movs	r2, #16
  4018f4:	4611      	mov	r1, r2
  4018f6:	2014      	movs	r0, #20
  4018f8:	4c14      	ldr	r4, [pc, #80]	; (40194c <main+0x78>)
  4018fa:	47a0      	blx	r4
	gfx_mono_draw_string("mundo", 50,16, &sysfont);
  4018fc:	4b14      	ldr	r3, [pc, #80]	; (401950 <main+0x7c>)
  4018fe:	2210      	movs	r2, #16
  401900:	2132      	movs	r1, #50	; 0x32
  401902:	4814      	ldr	r0, [pc, #80]	; (401954 <main+0x80>)
  401904:	4c14      	ldr	r4, [pc, #80]	; (401958 <main+0x84>)
  401906:	47a0      	blx	r4
	
	LED_init(1);
  401908:	2001      	movs	r0, #1
  40190a:	4b14      	ldr	r3, [pc, #80]	; (40195c <main+0x88>)
  40190c:	4798      	blx	r3
	//TC
	TC_init(TC0, ID_TC1, 1, 4);
  40190e:	4c14      	ldr	r4, [pc, #80]	; (401960 <main+0x8c>)
  401910:	2304      	movs	r3, #4
  401912:	2201      	movs	r2, #1
  401914:	2118      	movs	r1, #24
  401916:	4620      	mov	r0, r4
  401918:	4d12      	ldr	r5, [pc, #72]	; (401964 <main+0x90>)
  40191a:	47a8      	blx	r5
	tc_start(TC0, 1);
  40191c:	2101      	movs	r1, #1
  40191e:	4620      	mov	r0, r4
  401920:	4b11      	ldr	r3, [pc, #68]	; (401968 <main+0x94>)
  401922:	4798      	blx	r3
	//RTT
	RTT_init(1, 4, RTT_MR_ALMIEN); 
  401924:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401928:	2004      	movs	r0, #4
  40192a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  40192e:	4b0f      	ldr	r3, [pc, #60]	; (40196c <main+0x98>)
  401930:	4798      	blx	r3
  
  

  /* Insert application code here, after the board has been initialized. */
	while(1) {
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401932:	2502      	movs	r5, #2
  401934:	4c0e      	ldr	r4, [pc, #56]	; (401970 <main+0x9c>)
  401936:	4628      	mov	r0, r5
  401938:	47a0      	blx	r4
  40193a:	e7fc      	b.n	401936 <main+0x62>
  40193c:	00400c6d 	.word	0x00400c6d
  401940:	00400bfd 	.word	0x00400bfd
  401944:	400e1850 	.word	0x400e1850
  401948:	00400899 	.word	0x00400899
  40194c:	00400639 	.word	0x00400639
  401950:	2040000c 	.word	0x2040000c
  401954:	0040252c 	.word	0x0040252c
  401958:	00400801 	.word	0x00400801
  40195c:	0040177d 	.word	0x0040177d
  401960:	4000c000 	.word	0x4000c000
  401964:	004017ed 	.word	0x004017ed
  401968:	004003d5 	.word	0x004003d5
  40196c:	00401699 	.word	0x00401699
  401970:	004011c1 	.word	0x004011c1

00401974 <__libc_init_array>:
  401974:	b570      	push	{r4, r5, r6, lr}
  401976:	4e0f      	ldr	r6, [pc, #60]	; (4019b4 <__libc_init_array+0x40>)
  401978:	4d0f      	ldr	r5, [pc, #60]	; (4019b8 <__libc_init_array+0x44>)
  40197a:	1b76      	subs	r6, r6, r5
  40197c:	10b6      	asrs	r6, r6, #2
  40197e:	bf18      	it	ne
  401980:	2400      	movne	r4, #0
  401982:	d005      	beq.n	401990 <__libc_init_array+0x1c>
  401984:	3401      	adds	r4, #1
  401986:	f855 3b04 	ldr.w	r3, [r5], #4
  40198a:	4798      	blx	r3
  40198c:	42a6      	cmp	r6, r4
  40198e:	d1f9      	bne.n	401984 <__libc_init_array+0x10>
  401990:	4e0a      	ldr	r6, [pc, #40]	; (4019bc <__libc_init_array+0x48>)
  401992:	4d0b      	ldr	r5, [pc, #44]	; (4019c0 <__libc_init_array+0x4c>)
  401994:	1b76      	subs	r6, r6, r5
  401996:	f000 fdcf 	bl	402538 <_init>
  40199a:	10b6      	asrs	r6, r6, #2
  40199c:	bf18      	it	ne
  40199e:	2400      	movne	r4, #0
  4019a0:	d006      	beq.n	4019b0 <__libc_init_array+0x3c>
  4019a2:	3401      	adds	r4, #1
  4019a4:	f855 3b04 	ldr.w	r3, [r5], #4
  4019a8:	4798      	blx	r3
  4019aa:	42a6      	cmp	r6, r4
  4019ac:	d1f9      	bne.n	4019a2 <__libc_init_array+0x2e>
  4019ae:	bd70      	pop	{r4, r5, r6, pc}
  4019b0:	bd70      	pop	{r4, r5, r6, pc}
  4019b2:	bf00      	nop
  4019b4:	00402544 	.word	0x00402544
  4019b8:	00402544 	.word	0x00402544
  4019bc:	0040254c 	.word	0x0040254c
  4019c0:	00402544 	.word	0x00402544

004019c4 <register_fini>:
  4019c4:	4b02      	ldr	r3, [pc, #8]	; (4019d0 <register_fini+0xc>)
  4019c6:	b113      	cbz	r3, 4019ce <register_fini+0xa>
  4019c8:	4802      	ldr	r0, [pc, #8]	; (4019d4 <register_fini+0x10>)
  4019ca:	f000 b805 	b.w	4019d8 <atexit>
  4019ce:	4770      	bx	lr
  4019d0:	00000000 	.word	0x00000000
  4019d4:	004019e5 	.word	0x004019e5

004019d8 <atexit>:
  4019d8:	2300      	movs	r3, #0
  4019da:	4601      	mov	r1, r0
  4019dc:	461a      	mov	r2, r3
  4019de:	4618      	mov	r0, r3
  4019e0:	f000 b81e 	b.w	401a20 <__register_exitproc>

004019e4 <__libc_fini_array>:
  4019e4:	b538      	push	{r3, r4, r5, lr}
  4019e6:	4c0a      	ldr	r4, [pc, #40]	; (401a10 <__libc_fini_array+0x2c>)
  4019e8:	4d0a      	ldr	r5, [pc, #40]	; (401a14 <__libc_fini_array+0x30>)
  4019ea:	1b64      	subs	r4, r4, r5
  4019ec:	10a4      	asrs	r4, r4, #2
  4019ee:	d00a      	beq.n	401a06 <__libc_fini_array+0x22>
  4019f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4019f4:	3b01      	subs	r3, #1
  4019f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4019fa:	3c01      	subs	r4, #1
  4019fc:	f855 3904 	ldr.w	r3, [r5], #-4
  401a00:	4798      	blx	r3
  401a02:	2c00      	cmp	r4, #0
  401a04:	d1f9      	bne.n	4019fa <__libc_fini_array+0x16>
  401a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401a0a:	f000 bd9f 	b.w	40254c <_fini>
  401a0e:	bf00      	nop
  401a10:	0040255c 	.word	0x0040255c
  401a14:	00402558 	.word	0x00402558

00401a18 <__retarget_lock_acquire_recursive>:
  401a18:	4770      	bx	lr
  401a1a:	bf00      	nop

00401a1c <__retarget_lock_release_recursive>:
  401a1c:	4770      	bx	lr
  401a1e:	bf00      	nop

00401a20 <__register_exitproc>:
  401a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a24:	4d2c      	ldr	r5, [pc, #176]	; (401ad8 <__register_exitproc+0xb8>)
  401a26:	4606      	mov	r6, r0
  401a28:	6828      	ldr	r0, [r5, #0]
  401a2a:	4698      	mov	r8, r3
  401a2c:	460f      	mov	r7, r1
  401a2e:	4691      	mov	r9, r2
  401a30:	f7ff fff2 	bl	401a18 <__retarget_lock_acquire_recursive>
  401a34:	4b29      	ldr	r3, [pc, #164]	; (401adc <__register_exitproc+0xbc>)
  401a36:	681c      	ldr	r4, [r3, #0]
  401a38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d03e      	beq.n	401abe <__register_exitproc+0x9e>
  401a40:	685a      	ldr	r2, [r3, #4]
  401a42:	2a1f      	cmp	r2, #31
  401a44:	dc1c      	bgt.n	401a80 <__register_exitproc+0x60>
  401a46:	f102 0e01 	add.w	lr, r2, #1
  401a4a:	b176      	cbz	r6, 401a6a <__register_exitproc+0x4a>
  401a4c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401a50:	2401      	movs	r4, #1
  401a52:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401a56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401a5a:	4094      	lsls	r4, r2
  401a5c:	4320      	orrs	r0, r4
  401a5e:	2e02      	cmp	r6, #2
  401a60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401a64:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401a68:	d023      	beq.n	401ab2 <__register_exitproc+0x92>
  401a6a:	3202      	adds	r2, #2
  401a6c:	f8c3 e004 	str.w	lr, [r3, #4]
  401a70:	6828      	ldr	r0, [r5, #0]
  401a72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401a76:	f7ff ffd1 	bl	401a1c <__retarget_lock_release_recursive>
  401a7a:	2000      	movs	r0, #0
  401a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a80:	4b17      	ldr	r3, [pc, #92]	; (401ae0 <__register_exitproc+0xc0>)
  401a82:	b30b      	cbz	r3, 401ac8 <__register_exitproc+0xa8>
  401a84:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401a88:	f3af 8000 	nop.w
  401a8c:	4603      	mov	r3, r0
  401a8e:	b1d8      	cbz	r0, 401ac8 <__register_exitproc+0xa8>
  401a90:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401a94:	6002      	str	r2, [r0, #0]
  401a96:	2100      	movs	r1, #0
  401a98:	6041      	str	r1, [r0, #4]
  401a9a:	460a      	mov	r2, r1
  401a9c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401aa0:	f04f 0e01 	mov.w	lr, #1
  401aa4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401aa8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401aac:	2e00      	cmp	r6, #0
  401aae:	d0dc      	beq.n	401a6a <__register_exitproc+0x4a>
  401ab0:	e7cc      	b.n	401a4c <__register_exitproc+0x2c>
  401ab2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401ab6:	430c      	orrs	r4, r1
  401ab8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401abc:	e7d5      	b.n	401a6a <__register_exitproc+0x4a>
  401abe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401ac2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401ac6:	e7bb      	b.n	401a40 <__register_exitproc+0x20>
  401ac8:	6828      	ldr	r0, [r5, #0]
  401aca:	f7ff ffa7 	bl	401a1c <__retarget_lock_release_recursive>
  401ace:	f04f 30ff 	mov.w	r0, #4294967295
  401ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ad6:	bf00      	nop
  401ad8:	20400448 	.word	0x20400448
  401adc:	00402534 	.word	0x00402534
  401ae0:	00000000 	.word	0x00000000

00401ae4 <sysfont_glyphs>:
	...
  401b04:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  401b14:	00000030 00000000 00000000 006c006c     0...........l.l.
  401b24:	006c006c 00000000 00000000 00000000     l.l.............
	...
  401b3c:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  401b4c:	00000028 00000000 00000000 003c0010     (.............<.
  401b5c:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  401b74:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  401b84:	00000088 00000000 00000000 00900060     ............`...
  401b94:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  401bac:	00100010 00000010 00000000 00000000     ................
	...
  401bc8:	00100008 00200020 00200020 00200020     .... . . . . . .
  401bd8:	00080010 00000000 00000000 00100020     ............ ...
  401be8:	00080008 00080008 00080008 00200010     .............. .
  401bf8:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  401c20:	00100010 00fe0010 00100010 00000010     ................
	...
  401c48:	00300010 00000020 00000000 00000000     ..0. ...........
  401c58:	00000000 007c0000 00000000 00000000     ......|.........
	...
  401c7c:	00300000 00000030 00000000 00000000     ..0.0...........
  401c8c:	00080000 00100008 00200010 00400020     .......... . .@.
  401c9c:	00000040 00000000 00000000 00780000     @.............x.
  401cac:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  401cc4:	00100000 00500030 00100010 00100010     ....0.P.........
  401cd4:	0000007c 00000000 00000000 00700000     |.............p.
  401ce4:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401cfc:	00700000 00080088 00080030 00880008     ..p.....0.......
  401d0c:	00000070 00000000 00000000 00080000     p...............
  401d1c:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401d34:	00780000 00800080 000800f0 00080008     ..x.............
  401d44:	000000f0 00000000 00000000 00300000     ..............0.
  401d54:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401d6c:	00f80000 00100008 00200010 00400020     .......... . .@.
  401d7c:	00000040 00000000 00000000 00700000     @.............p.
  401d8c:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  401da4:	00700000 00880088 00780088 00100008     ..p.......x.....
  401db4:	00000060 00000000 00000000 00000000     `...............
  401dc4:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  401de0:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  401df0:	00000040 00000000 00000000 00100008     @...............
  401e00:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401e1c:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401e34:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401e4c:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401e5c:	00000020 00000000 00000000 00000000      ...............
  401e6c:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  401e84:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  401e94:	00000044 00000000 00000000 00f80000     D...............
  401ea4:	00840084 008400f8 00840084 000000f8     ................
	...
  401ebc:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  401ecc:	0000003c 00000000 00000000 00f00000     <...............
  401edc:	00840088 00840084 00880084 000000f0     ................
	...
  401ef4:	00f80000 00800080 008000f0 00800080     ................
  401f04:	000000f8 00000000 00000000 00f80000     ................
  401f14:	00800080 008000f8 00800080 00000080     ................
	...
  401f2c:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  401f3c:	00000038 00000000 00000000 00880000     8...............
  401f4c:	00880088 008800f8 00880088 00000088     ................
	...
  401f64:	00f80000 00200020 00200020 00200020     .... . . . . . .
  401f74:	000000f8 00000000 00000000 00f80000     ................
  401f84:	00080008 00080008 00080008 000000f0     ................
	...
  401f9c:	00840000 00900088 00d000a0 00840088     ................
  401fac:	00000084 00000000 00000000 00800000     ................
  401fbc:	00800080 00800080 00800080 000000fc     ................
	...
  401fd4:	00840000 00cc00cc 00b400b4 00840084     ................
  401fe4:	00000084 00000000 00000000 00840000     ................
  401ff4:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  40200c:	00780000 00840084 00840084 00840084     ..x.............
  40201c:	00000078 00000000 00000000 00f80000     x...............
  40202c:	00840084 00f80084 00800080 00000080     ................
	...
  402044:	00780000 00840084 00840084 00840084     ..x.............
  402054:	00200078 00000018 00000000 00f80000     x. .............
  402064:	00840084 00f80084 00840088 00000084     ................
	...
  40207c:	007c0000 00800080 00180060 00040004     ..|.....`.......
  40208c:	000000f8 00000000 00000000 00f80000     ................
  40209c:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4020b4:	00840000 00840084 00840084 00840084     ................
  4020c4:	00000078 00000000 00000000 00840000     x...............
  4020d4:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4020ec:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4020fc:	00000050 00000000 00000000 00880000     P...............
  40210c:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  402124:	00880000 00880088 00500050 00200020     ........P.P. . .
  402134:	00000020 00000000 00000000 00fc0000      ...............
  402144:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  40215c:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  40216c:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  40217c:	00200020 00100020 00100010 00080008      . . ...........
	...
  402194:	00080038 00080008 00080008 00080008     8...............
  4021a4:	00080008 00000038 00000000 00280010     ....8.........(.
  4021b4:	00000044 00000000 00000000 00000000     D...............
	...
  4021dc:	00000038 00000000 00000000 00200000     8............. .
  4021ec:	00000010 00000000 00000000 00000000     ................
	...
  402208:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  402220:	00800080 00f80080 00840084 00840084     ................
  402230:	000000f8 00000000 00000000 00000000     ................
  402240:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402258:	00040004 007c0004 00840084 008c0084     ......|.........
  402268:	00000074 00000000 00000000 00000000     t...............
  402278:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402290:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  4022a0:	000000fc 00000000 00000000 00000000     ................
  4022b0:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4022c0:	00000078 00000000 00800080 00b80080     x...............
  4022d0:	008400c4 00840084 00000084 00000000     ................
  4022e0:	00000000 00100000 00700000 00100010     ..........p.....
  4022f0:	00100010 0000007c 00000000 00000000     ....|...........
  402300:	00080000 00780000 00080008 00080008     ......x.........
  402310:	00080008 00700008 00000000 00800080     ......p.........
  402320:	00880080 00a00090 008800d0 00000088     ................
	...
  402338:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402348:	000000f8 00000000 00000000 00000000     ................
  402358:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402374:	00b80000 008400c4 00840084 00000084     ................
	...
  402390:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4023ac:	00b80000 008400c4 00840084 008000f8     ................
  4023bc:	00000080 00000000 00000000 007c0000     ..............|.
  4023cc:	00840084 00840084 0004007c 00000004     ........|.......
	...
  4023e4:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402400:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  40241c:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402438:	00880000 00880088 00880088 0000007c     ............|...
	...
  402454:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402470:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  40248c:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4024a8:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4024b8:	00000040 00000000 00000000 00f80000     @...............
  4024c8:	00100008 00400020 000000f8 00000000     .... .@.........
  4024d8:	00000000 00200010 00100020 00200020     ...... . ... . .
  4024e8:	00200010 00100020 00000000 00000000     .. . ...........
  4024f8:	00100010 00100010 00000000 00100010     ................
  402508:	00100010 00000000 00000000 00100020     ............ ...
  402518:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402528:	00000000 646e756d 0000006f              ....mundo...

00402534 <_global_impure_ptr>:
  402534:	20400020                                 .@ 

00402538 <_init>:
  402538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40253a:	bf00      	nop
  40253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40253e:	bc08      	pop	{r3}
  402540:	469e      	mov	lr, r3
  402542:	4770      	bx	lr

00402544 <__init_array_start>:
  402544:	004019c5 	.word	0x004019c5

00402548 <__frame_dummy_init_array_entry>:
  402548:	00400165                                e.@.

0040254c <_fini>:
  40254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40254e:	bf00      	nop
  402550:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402552:	bc08      	pop	{r3}
  402554:	469e      	mov	lr, r3
  402556:	4770      	bx	lr

00402558 <__fini_array_start>:
  402558:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1ae4 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06e8 2040                                   ..@ 
